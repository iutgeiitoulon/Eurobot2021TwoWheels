<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SciChart.Core</name>
    </assembly>
    <members>
        <member name="T:SciChart.Core.AttachedProperties.ClipToBoundsHelper">
            <summary>
            Attached property which helps to set ClipToBounds property
            </summary>
        </member>
        <member name="F:SciChart.Core.AttachedProperties.ClipToBoundsHelper.ClipToBoundsProperty">
            <summary>
            Defines the ClipToBounds DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Core.AttachedProperties.ClipToBoundsHelper.ClipToEllipseBoundsProperty">
            <summary>
            Defines the ClipToEllipseBounds DependencyProperty
            </summary>
        </member>
        <member name="M:SciChart.Core.AttachedProperties.ClipToBoundsHelper.GetClipToBounds(System.Windows.DependencyObject)">
            <summary>
            Gets the ClipToBounds DependencyProperty value
            </summary>
            <param name="depObj">The dependencyObject target</param>
            <returns>The ClipToBounds property value</returns>
        </member>
        <member name="M:SciChart.Core.AttachedProperties.ClipToBoundsHelper.SetClipToBounds(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the ClipToBounds DependencyProperty value. If true, the target object clips any child elements to the bounds when rendering.
            </summary>
            <param name="depObj">The dependencyObject target</param>
            <param name="clipToBounds">if set to <c>true</c> clip to bounds.</param>
        </member>
        <member name="M:SciChart.Core.AttachedProperties.ClipToBoundsHelper.GetClipToEllipseBounds(System.Windows.DependencyObject)">
            <summary>
            Gets the ClipToEllipseBounds DependencyProperty value
            </summary>
            <param name="depObj"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.AttachedProperties.ClipToBoundsHelper.SetClipToEllipseBounds(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the ClipToEllipseBounds DependencyProperty value. If true, the target object clips any child elements to the ellipse bounds when rendering.
            </summary>
            <param name="depObj"></param>
            <param name="value"></param>
        </member>
        <member name="T:SciChart.Core.AttachedProperties.CompatibleFocus">
            <summary>
            A helper class which provides properties to control element's focus. 
            Compatible with both Silverlight and WPF.
            </summary>
        </member>
        <member name="F:SciChart.Core.AttachedProperties.CompatibleFocus.IsFocusableProperty">
            <summary>
            Defines the IsFocusable DependencyProperty
            </summary>
        </member>
        <member name="M:SciChart.Core.AttachedProperties.CompatibleFocus.GetIsFocusable(System.Windows.DependencyObject)">
            <summary>
            Gets the IsFocusableProperty
            </summary>
            <param name="obj">The object.</param>
            <returns>IsFocusableProperty value</returns>
        </member>
        <member name="M:SciChart.Core.AttachedProperties.CompatibleFocus.SetIsFocusable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the IsFocusableProperty
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The IsFocusableProperty value</param>
        </member>
        <member name="T:SciChart.Core.AttachedProperties.Device">
            <summary>
            Used to show or hide UIElements based on framework (WPF, Silverlight)
            </summary>
        </member>
        <member name="F:SciChart.Core.AttachedProperties.Device.SnapsToDevicePixelsProperty">
            <summary>
            Defines the SnapsToDevicePixels DependencyProperty
            </summary>
        </member>
        <member name="M:SciChart.Core.AttachedProperties.Device.SetSnapsToDevicePixels(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the SnapsToDevicePixels attached property on the specified DependencyObject
            </summary>
            <param name="element">The DependencyObject</param>
            <param name="snapToDevicePixels">The value of the SnapsToDevicePixels attached property to set</param>
        </member>
        <member name="M:SciChart.Core.AttachedProperties.Device.GetSnapsToDevicePixels(System.Windows.DependencyObject)">
            <summary>
            Gets the SnapsToDevicePixels attached property from the specified DependencyObject
            </summary>
            <param name="element">The DependencyObject</param>
            <return>The value of the SnapsToDevicePixels attached property</return>
        </member>
        <member name="T:SciChart.Core.Cpp.Interop.IntVector.IntVectorEnumerator">
            Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
            whenever the collection is modified. This has been done for changes in the size of the
            collection but not when one of the elements of the collection is modified as it is a bit
            tricky to detect unmanaged code that modifies the collection under our feet.
        </member>
        <member name="T:SciChart.Core.Extensions.AttributeExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Attribute" /></summary>
        </member>
        <member name="T:SciChart.Core.Extensions.BrushExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Windows.Media.Brush" /> type
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.BrushExtensions.IsTransparent(System.Windows.Media.Brush)">
            <summary>
            Determines whether this Brush is transparent.
            </summary>
            <param name="brush">The brush.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.BrushExtensions.ExtractColor(System.Windows.Media.Brush)">
            <summary>
            Extracts the color frmo the Brush
            </summary>
            <param name="brush">The brush.</param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Core.Extensions.ColorExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Windows.Media.Color" /> type
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.ColorExtensions.IsTransparent(System.Windows.Media.Color)">
            <summary>
            Determines whether this instance is transparent.
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.ColorExtensions.ToInt(System.Windows.Media.Color)">
            <summary>
            Returns the integer representation of the given color.
            </summary>
        </member>
        <member name="T:SciChart.Core.Extensions.DateTimeExtensions">
            <summary>
            Extension methods for the <see cref="T:System.DateTime" /> type
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.DateTimeExtensions.IsDefined(System.DateTime)">
            <summary>
            Determines whether the <see cref="T:System.DateTime" /> is defined.
            </summary>
            <param name="current">The datetime.</param>
            <returns>True if defined</returns>
        </member>
        <member name="M:SciChart.Core.Extensions.DateTimeExtensions.IsAdditionValid(System.DateTime,System.TimeSpan)">
            <summary>
            Determines whether addition is valid between the specified <see cref="T:System.DateTime" /> and <see cref="T:System.TimeSpan" /></summary>
            <param name="current">The DateTime.</param>
            <param name="delta">The TimeSpan.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.DateTimeExtensions.AddDelta(System.DateTime,System.TimeSpan)">
            <summary>
            Adds the delta between the specified <see cref="T:System.DateTime" /> and <see cref="T:System.TimeSpan" /></summary>
            <param name="current">The DateTime.</param>
            <param name="delta">The TimeSpan.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.DateTimeExtensions.AddMonths(System.DateTime,System.Int32)">
            <summary>
            Adds the number of months to a DateTime instance, rolling year if end of year is reached
            </summary>
            <param name="current">The current.</param>
            <param name="months">The months.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.DateTimeExtensions.AddYears(System.DateTime,System.Int32)">
            <summary>
            Adds the number of years to a DateTime instance
            </summary>
            <param name="current">The DateTime.</param>
            <param name="years">The years.</param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Core.Extensions.DecimalExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Decimal" /> type
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.DecimalExtensions.RoundOff(System.Decimal)">
            <summary>
            Rounds the <see cref="T:System.Decimal" /></summary>
            <param name="d">The Decimal.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.DecimalExtensions.RoundOff(System.Decimal,System.MidpointRounding)">
            <summary>
            Rounds the <see cref="T:System.Decimal" /> with the specified <see cref="T:System.MidpointRounding" /> mode
            </summary>
            <param name="d">The Decimal.</param>
            <param name="mode">The MidpointRounding.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.DecimalExtensions.RoundOff(System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds using arithmetic (5 rounds up) symmetrical (up is away from zero) rounding
            </summary>
            <param name="d">A Decimal number to be rounded.</param>
            <param name="decimals">The number of significant fractional digits (precision) in the return value.</param>
            <param name="mode">The midpoint rounding mode</param>
            <returns>The number nearest d with precision equal to decimals. If d is halfway between two numbers, then the nearest whole number away from zero is returned.</returns>
        </member>
        <member name="M:SciChart.Core.Extensions.DecimalExtensions.ToDateTime(System.Decimal)">
            <summary>
            Converts a <see cref="T:System.Decimal" /> to <see cref="T:System.DateTime" /></summary>
            <param name="d">The decimal.</param>
            <returns>The equivalent DateTime</returns>
        </member>
        <member name="T:SciChart.Core.Extensions.DispatcherExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Windows.Threading.Dispatcher" /> type
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.DispatcherExtensions.BeginInvokeAlways(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            Async Invokes a delegate on the UI thread
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:SciChart.Core.Extensions.DispatcherExtensions.BeginInvokeIfRequired(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            Async Invokes a delegate on the UI thread, only if not already on the UI thread
            </summary>
            <param name="dispatcher">The dispatcher.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="T:SciChart.Core.Extensions.DisposableExtensions">
            <summary>
            Extension methods for <see cref="T:System.IDisposable" /> types
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.DisposableExtensions.SafeDispose(System.IDisposable)">
            <summary>
            Checks for null and if not null, calls Dispose
            </summary>
            <param name="d">The IDisposable.</param>
        </member>
        <member name="T:SciChart.Core.Extensions.DoubleExtensions">
            <summary>
            Extension methods for <see cref="T:System.Double" /> types
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.DoubleExtensions.IsRealNumber(System.Double)">
            <summary>
            Determines whether this double is a real number
            </summary>
            <param name="number">The number.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.DoubleExtensions.IsNaN(System.Double)">
            <summary>
            Determines whether the <see cref="T:System.Double" /> is a NaN
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.DoubleExtensions.RoundOff(System.Double)">
            <summary>
            Rounds the <see cref="T:System.Double" /></summary>
            <param name="d">The Double.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.DoubleExtensions.RoundOff(System.Double,System.MidpointRounding)">
            <summary>
            Rounds the <see cref="T:System.Double" /> with the specified <see cref="T:System.MidpointRounding" /> mode
            </summary>
            <param name="d">The Double.</param>
            <param name="mode">The MidpointRoudningMode</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.DoubleExtensions.RoundOff(System.Double,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds using arithmetic (5 rounds up) symmetrical (up is away from zero) rounding
            </summary>
            <param name="d">A double number to be rounded.</param>
            <param name="decimals">The number of significant fractional digits (precision) in the return value.</param>
            <param name="mode">The midpoint rounding mode</param>
            <returns>The number nearest d with precision equal to decimals. If d is halfway between two numbers, then the nearest whole number away from zero is returned.</returns>
        </member>
        <member name="M:SciChart.Core.Extensions.DoubleExtensions.ToDateTime(System.Double)">
            <summary>
            Converts a <see cref="T:System.Double" /> to <see cref="T:System.DateTime" /></summary>
            <param name="ticks">The ticks as Double.</param>
            <returns>The equivalent DateTime</returns>
        </member>
        <member name="M:SciChart.Core.Extensions.DoubleExtensions.ToDecimal(System.Double)">
            <summary>
            Converts a <see cref="T:System.Double" /> to <see cref="T:System.Decimal" /></summary>
            <param name="value">The Double.</param>
            <returns>The equivalent Decimal.</returns>
        </member>
        <member name="M:SciChart.Core.Extensions.DoubleExtensions.ClipToInt(System.Double)">
            <summary>
            Converts a <see cref="T:System.Double" /> to <see cref="T:System.Int32" /> while avoiding arithmetic overflow
            </summary>
            <param name="d">The Double.</param>
            <returns>The equivalent Int32</returns>
        </member>
        <member name="T:SciChart.Core.Extensions.ElementExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Windows.UIElement" /> type
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.MeasureArrange(System.Windows.UIElement)">
            <summary>
            Forces the layout pass on the element
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.IsVisible(System.Windows.UIElement)">
            <summary>
            Determines whether this instance is visible.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.IsInVisualTree(System.Windows.DependencyObject)">
            <summary>
            Determines whether instance is in visual tree
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.IsInVisualTree(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Determines whether this instance is in visual tree with the specified ancestor
            </summary>
            <param name="element">The element.</param>
            <param name="ancestor">The ancestor.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.TranslatePoint(System.Windows.FrameworkElement,System.Windows.Point,SciChart.Core.Framework.IHitTestable)">
            <summary>
            Translates a Point relative to a <see cref="T:SciChart.Core.Framework.IHitTestable" /> element
            </summary>
            <param name="element">The element.</param>
            <param name="point">The point.</param>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.IsPointWithinBounds(System.Windows.FrameworkElement,System.Windows.Point)">
            <summary>
            Determines whether a Point is within bounds of an element
            </summary>
            <param name="element">The element.</param>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.GetBoundsRelativeTo(System.Windows.FrameworkElement,SciChart.Core.Framework.IHitTestable)">
            <summary>
            Gets the bounds of an element relative to another <see cref="T:SciChart.Core.Framework.IHitTestable" /> element
            </summary>
            <param name="element">The element.</param>
            <param name="relativeTo">The relative to.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.GetBoundsRelativeTo(System.Windows.FrameworkElement,System.Windows.UIElement)">
            <summary>
            Get the bounds of an element relative to another element.
            </summary>
            <param name="element">The element.</param>
            <param name="otherElement">
            The element relative to the other element.
            </param>
            <returns>
            The bounds of the element relative to another element, or null if
            the elements are not related.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="element" /> is null.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="otherElement" /> is null.
            </exception>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.FindLogicalParent``1(System.Windows.FrameworkElement)">
            <summary>
            Finds the logical parent of the <see cref="T:System.Windows.FrameworkElement" /></summary>
            <typeparam name="T">The type of parent to find</typeparam>
            <param name="frameworkElement">The FrameworkElement.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.FindVisualParent``1(System.Windows.UIElement)">
            <summary>
            Finds the visual parent of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.FindVisualParent(System.Windows.UIElement,System.Type)">
            <summary>
            Finds the visual parent given a System.Type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.RegisterForNotification(System.Windows.FrameworkElement,System.String,System.Windows.PropertyChangedCallback)">
            <summary>
            Registers a PropertyChangedCallback on the property name 
            </summary>
            <param name="element">The element.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.ThreadSafeSetValue(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.Object)">
            <summary>
            ThreadSafe DependencyObject.SetValue implementation
            </summary>
            <param name="element">The element.</param>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.CanvasXy(System.Windows.UIElement,System.Windows.Point)">
            <summary>
            Sets Canvas.Left, Canvas.Top to the X,Y value of a point 
            </summary>
            <param name="element">The element.</param>
            <param name="topLeft">The top left.</param>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.CanvasXy(System.Windows.UIElement,System.Double,System.Double)">
            <summary>
            Sets Canvas.Left, Canvas.Top to the X,Y value of a point 
            </summary>
            <param name="element">The element.</param>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.LineXy(System.Windows.Shapes.Line,System.Windows.Point,System.Windows.Point)">
            <summary>
            Sets X1,Y1,X2,Y2 of a Line 
            </summary>
            <param name="line">The line.</param>
            <param name="x1y1">The x1y1.</param>
            <param name="x2y2">The x2y2.</param>
        </member>
        <member name="M:SciChart.Core.Extensions.ElementExtensions.LineXy(System.Windows.Shapes.Line,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets X1,Y1,X2,Y2 of a Line
            </summary>
            <param name="line">The line.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
        </member>
        <member name="T:SciChart.Core.Extensions.EnumerableExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.IList" />, <see cref="T:System.Collections.IEnumerable" /> types
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.EnumerableExtensions.ToEnumerable``1(``0)">
            <summary>
            Yields a single item, converting it to <see cref="T:System.Collections.IEnumerable" />.
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.EnumerableExtensions.IsNullOrEmptyList(System.Collections.IList)">
            <summary>
            Determines whether this is a is null or empty list
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether this is a is null or empty list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether this list is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.EnumerableExtensions.ForEachDo``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            Iterates over the list and performs an action on each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:SciChart.Core.Extensions.EnumerableExtensions.ForEachDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterates over the list and performs an action on each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:SciChart.Core.Extensions.EnumerableExtensions.ForEachDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            Iterates over the list and performs an action on each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="M:SciChart.Core.Extensions.EnumerableExtensions.RemoveWhere``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Removes items from the list that match a predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:SciChart.Core.Extensions.EnumerableExtensions.AddIfNotContains``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Adds an item to a list if it does not already contain it
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:SciChart.Core.Extensions.EnumerableExtensions.RemoveIfContains``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Removes an item from a list if it contains the item
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:SciChart.Core.Extensions.EnumerableExtensions.ToStringArray``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Outputs a List as a Comma separated string. Used for debug purposes 
            </summary>
            <typeparam name="T">The type of the array</typeparam>
            <param name="array">The list.</param>
            <param name="stringFormat">The string format e.g. in the format '{0:n2}' will output 0.00 0.01  etc...</param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Core.Extensions.FloatExtensions">
            <summary>
            Extension methods for <see cref="T:System.Single" /> types
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.FloatExtensions.ClipToInt(System.Single)">
            <summary>
            Converts a <see cref="T:System.Single" /> to <see cref="T:System.Int32" /> while avoiding arithmetic overflow
            </summary>
            <param name="d">The Double.</param>
            <returns>The equivalent Int32</returns>
        </member>
        <member name="M:SciChart.Core.Extensions.FloatExtensions.IsNaN(System.Single)">
            <summary>
            Determines whether the <see cref="T:System.Single" /> is a NaN
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Core.Extensions.IComparableExtensions">
            <summary>
            Extension methods for the <see cref="T:System.IComparable" /> type
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.IComparableExtensions.IsDefined(System.IComparable)">
            <summary>
            Determines whether this IComparable is defined.
            </summary>
            <param name="c">The c.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.IComparableExtensions.ToDouble(System.Double)">
            <summary>
            Fast conversion to Double if Double
            </summary>
            <param name="c">The input IComparable.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.IComparableExtensions.ToDouble(System.IComparable)">
            <summary>
            Conversion to Double if IComparable
            </summary>
            <param name="c">The input IComparable.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.IComparableExtensions.ToDoubleArray``1(``0[])">
            <summary>
            Converts an <see cref="T:System.IComparable" /> array to double array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputArray">The input array.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.IComparableExtensions.ToDoubleArray``1(System.Collections.Generic.IList{``0})">
            <summary>
            Converts an <see cref="T:System.IComparable" /> list to double array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inputArray">The input array.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.IComparableExtensions.ToDateTime(System.IComparable)">
            <summary>
            Converts an <see cref="T:System.IComparable" /> to DateTime
            </summary>
            <param name="c">The IComparable.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.IComparableExtensions.ToTimeSpan(System.IComparable)">
            <summary>
            Converts an <see cref="T:System.IComparable" /> to TimeSpan
            </summary>
            <param name="c">The IComparable.</param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Core.Extensions.IntExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Int32" /> type.
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.IntExtensions.ToColor(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Windows.Media.Color" /> that corresponds to this Integer.
            </summary>
            <param name="intColor"></param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Core.Extensions.LongExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Int64" /> type
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.LongExtensions.ToDateTime(System.Int64)">
            <summary>
            Converts a Long (ticks) to DateTime
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>A DateTime</returns>
        </member>
        <member name="T:SciChart.Core.Extensions.PanelExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Windows.Controls.Panel" /> type
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.PanelExtensions.SafeAddChild(System.Windows.Controls.Panel,System.Object,System.Int32)">
            <summary>
            Adds a child if the panel is not null and if the panel does not contain the element
            </summary>
            <param name="panel">The panel.</param>
            <param name="child">The child.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:SciChart.Core.Extensions.PanelExtensions.SafeRemoveChild(System.Windows.Controls.Panel,System.Object)">
            <summary>
            Removes a child if the panel is not null and the panel contains the element
            </summary>
            <param name="panel">The panel.</param>
            <param name="child">The child.</param>
        </member>
        <member name="T:SciChart.Core.Extensions.PointExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Windows.Point" /> type
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.PointExtensions.Floor(System.Windows.Point)">
            <summary>
            Returns a new Point where X and Y components are equivalent to Math.Floor of the input point
            </summary>
            <param name="point">The input point, e.g. x=1.242, y=6.336</param>
            <returns>The Floor'ed point, e.g. x=1, y=6</returns>
        </member>
        <member name="T:SciChart.Core.Extensions.PropertyHelper">
            <summary>
            Contains common functions to get property names
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.PropertyHelper.GetMemberName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the name of a type member from the <see cref="T:System.Linq.Expressions.Expression" /></summary>
        </member>
        <member name="T:SciChart.Core.Extensions.RectExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Windows.Rect" /> type
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.RectExtensions.BottomLeft(System.Windows.Rect)">
            <summary>
            Cross platform extension method for getting rect.BottomLeft
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.RectExtensions.TopLeft(System.Windows.Rect)">
            <summary>
            Cross platform extension method for getting rect.TopLeft
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.RectExtensions.TopRight(System.Windows.Rect)">
            <summary>
            Cross platform extension method for getting rect.TopRight
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.RectExtensions.BottomRight(System.Windows.Rect)">
            <summary>
            Cross platform extension method for getting rect.BottomRight
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.RectExtensions.ClipToBounds(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Clips a Point to Rect bounds
            </summary>
            <param name="rect">The rect.</param>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.RectExtensions.Expand(System.Windows.Rect,System.Double)">
            <summary>
            Expands a rect by offset
            </summary>
            <param name="rect">The rect.</param>
            <param name="offset">The offset.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.RectExtensions.ToPointsArray(System.Windows.Rect)">
            <summary>
            Returns <paramref name="rect" /> TopLeft, TopRight, BottomRight and BottomLeft in the points array
            </summary>
        </member>
        <member name="T:SciChart.Core.Extensions.StringExtensions">
            <summary>
            Extension methods for the <see cref="T:System.String" /> type
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.StringExtensions.Substring(System.String,System.String,System.String)">
            <summary>
            Returns the substring of the input string which is sandwiched between the Before and After strings
            </summary>
            <param name="input"></param>
            <param name="before"></param>
            <param name="after"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Determines whether a string is null or white space
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.StringExtensions.AllIndexesOf(System.String,System.String)">
            <summary>
            Gets all indices of a value in a string
            </summary>
            <param name="str">The string.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.StringExtensions.Measure(System.String,System.Windows.Controls.TextBlock)">
            <summary>
            Measures the provided <see cref="T:System.String" /> instance using <see cref="T:System.Windows.Media.FormattedText" />.
            </summary>
            <param name="candidate">A string to measure.</param>
            <param name="textBlock">TextBlock which the string will be assigned to.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.StringExtensions.Measure(System.String,System.Double)">
            <summary>
            Measures the provided <see cref="T:System.String" /> instance using <see cref="T:System.Windows.Media.FormattedText" />.
            </summary>
            <param name="candidate">A string to measure.</param>
            <param name="fontSize">The desired font size.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.StringExtensions.ToNullable``1(System.String)">
            <summary>
            Converts string value to nullable T value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Core.Extensions.TimeSpanExtensions">
            <summary>
            Extension methods for the <see cref="T:System.TimeSpan" /> type
            </summary>
        </member>
        <member name="F:SciChart.Core.Extensions.TimeSpanExtensions.DaysInYear">
            <summary>
            The days in year
            </summary>
        </member>
        <member name="F:SciChart.Core.Extensions.TimeSpanExtensions.DaysInMonth">
            <summary>
            The days in month
            </summary>
        </member>
        <member name="M:SciChart.Core.Extensions.TimeSpanExtensions.IsZero(System.TimeSpan)">
            <summary>
            Determines whether this instance is zero.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.TimeSpanExtensions.FromMonths(System.Int32)">
            <summary>
            TimeSpan from number of months
            </summary>
            <param name="numberMonths">The number months.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.TimeSpanExtensions.FromWeeks(System.Int32)">
            <summary>
            TimeSpan from number of weeks
            </summary>
            <param name="numberWeeks">The number weeks.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.TimeSpanExtensions.FromYears(System.Int32)">
            <summary>
            Froms the years.
            </summary>
            <param name="numberYears">The number years.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.TimeSpanExtensions.IsDivisibleBy(System.TimeSpan,System.TimeSpan)">
            <summary>
            Determines whether a TimeSpan is divisible by another
            </summary>
            <param name="current">The current.</param>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.TimeSpanExtensions.IsAdditionValid(System.TimeSpan,System.TimeSpan)">
            <summary>
            Determines whether addition is valid between two timespans
            </summary>
            <param name="current">The current.</param>
            <param name="delta">The delta.</param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Core.Extensions.TypeExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Type" /></summary>
        </member>
        <member name="M:SciChart.Core.Extensions.TypeExtensions.ToTypeString(System.Type)">
            <summary>
            Converts type to string
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Extensions.TypeExtensions.GetAssembly(System.Type)">
            <summary>
            Gets the <see cref="T:System.Reflection.Assembly" /> that the current <see cref="T:System.Type" /> belongs to
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Core.Extensions.UIElementCollectionExtensions">
            <summary>
            Extension methods on the <see cref="T:System.Windows.Controls.UIElementCollection" /> type
            </summary>
        </member>
        <member name="T:SciChart.Core.Framework.DisposableAction">
            <summary>
            Wraps an Action in an IDisposable. Useful when you want to have lazy dispose which is often used by the DirectX render context
            </summary>
        </member>
        <member name="M:SciChart.Core.Framework.DisposableAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Core.Framework.DisposableAction" /> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:SciChart.Core.Framework.DisposableAction.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:SciChart.Core.Framework.DisposableBase">
            <summary>
            A base class which implements IDisposable and implements the Finalizer pattern to ensure dispose is called by the Garbage Collector if not called by the user 
            </summary>
        </member>
        <member name="M:SciChart.Core.Framework.DisposableBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SciChart.Core.Framework.DisposableBase" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Core.Framework.DisposableBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SciChart.Core.Framework.DisposableBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SciChart.Core.Framework.GCHelper">
            <summary>
            Temporarily suspends Garbage collection for the entire application. WARNING! Use only in Using blocks and use sparingly around performance-intensive code
            </summary>
        </member>
        <member name="M:SciChart.Core.Framework.GCHelper.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SciChart.Core.Framework.GCHelper" /> class from being created.
            </summary>
        </member>
        <member name="M:SciChart.Core.Framework.GCHelper.SuspendGarbageCollection">
            <summary>
            Temporarily suspends Garbage collection for the entire application. WARNING! Use only in Using blocks and use sparingly around performance-intensive code
            </summary>
            <returns>a GCHelper Instance which must be disposed to resume garbage collection</returns>
        </member>
        <member name="M:SciChart.Core.Framework.GCHelper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SciChart.Core.Framework.DispatchPriority">
            <summary>
            Describes the priorities at which operations can be invoked by way of the
                System.Windows.Threading.Dispatcher.
            </summary>
        </member>
        <member name="F:SciChart.Core.Framework.DispatchPriority.Invalid">
            <summary>
            The enumeration value is -1. This is an invalid priority.
            </summary>
        </member>
        <member name="F:SciChart.Core.Framework.DispatchPriority.Inactive">
            <summary>
            The enumeration value is 0. Operations are not processed.
            </summary>
        </member>
        <member name="F:SciChart.Core.Framework.DispatchPriority.SystemIdle">
            <summary>
            The enumeration value is 1. Operations are processed when the system is idle.
            </summary>
        </member>
        <member name="F:SciChart.Core.Framework.DispatchPriority.ApplicationIdle">
            <summary>
            The enumeration value is 2. Operations are processed when the application is idle.
            </summary>
        </member>
        <member name="F:SciChart.Core.Framework.DispatchPriority.ContextIdle">
            <summary>
            The enumeration value is 3. Operations are processed after background operations have completed.
            </summary>
        </member>
        <member name="F:SciChart.Core.Framework.DispatchPriority.Background">
            <summary>
            The enumeration value is 4. Operations are processed after all other non-idle
                operations are completed.
            </summary>
        </member>
        <member name="F:SciChart.Core.Framework.DispatchPriority.Input">
            <summary>
            The enumeration value is 5. Operations are processed at the same priority as input.
            </summary>
        </member>
        <member name="F:SciChart.Core.Framework.DispatchPriority.Loaded">
            <summary>
            The enumeration value is 6. Operations are processed when layout and render
                has finished but just before items at input priority are serviced. Specifically
                this is used when raising the Loaded event.
            </summary>
        </member>
        <member name="F:SciChart.Core.Framework.DispatchPriority.Render">
            <summary>
            The enumeration value is 7. Operations processed at the same priority as rendering.
            </summary>
        </member>
        <member name="F:SciChart.Core.Framework.DispatchPriority.DataBind">
            <summary>
            The enumeration value is 8. Operations are processed at the same priority as data binding.
            </summary>
        </member>
        <member name="F:SciChart.Core.Framework.DispatchPriority.Normal">
            <summary>
            The enumeration value is 9. Operations are processed at normal priority. This is the typical application priority.
            </summary>
        </member>
        <member name="F:SciChart.Core.Framework.DispatchPriority.Send">
            <summary>
            The enumeration value is 10. Operations are processed before other asynchronous operations. This is the highest priority.
            </summary>
        </member>
        <member name="T:SciChart.Core.Framework.IDispatcherFacade">
            <summary>
            Defines the interface to a Dispatcher Facade
            </summary>
        </member>
        <member name="M:SciChart.Core.Framework.IDispatcherFacade.Invoke(System.Action)">
            <summary>
            Invokes an action synchronously on the UI Thread 
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:SciChart.Core.Framework.IDispatcherFacade.BeginInvoke(System.Action,SciChart.Core.Framework.DispatchPriority)">
            <summary>
            Asynchronously invokes the <paramref name="action" /> on the UI Thread
            </summary>
            <param name="action">The action.</param>
            <param name="priority">The dispatcher priority.</param>
        </member>
        <member name="M:SciChart.Core.Framework.IDispatcherFacade.BeginInvokeIfRequired(System.Action,SciChart.Core.Framework.DispatchPriority)">
            <summary>
            Asynchronously invokes the <paramref name="action" /> on the UI Thread, only if not currently on the UI thread
            </summary>
            <param name="action">The action.</param>
            <param name="priority">The dispatcher priority.</param>
        </member>
        <member name="T:SciChart.Core.Framework.IHitTestable">
            <summary>
            Defines the base interface for a type which can be hit-tested
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:SciChart.Core.Framework.IHitTestable.ActualWidth">
            <summary>
            Gets the width of the <see cref="T:SciChart.Core.Framework.IHitTestable" /></summary>
        </member>
        <member name="P:SciChart.Core.Framework.IHitTestable.ActualHeight">
            <summary>
            Gets the height of the <see cref="T:SciChart.Core.Framework.IHitTestable" /></summary>
        </member>
        <member name="M:SciChart.Core.Framework.IHitTestable.TranslatePoint(System.Windows.Point,SciChart.Core.Framework.IHitTestable)">
            <summary>
            Translates the point relative to the other <see cref="T:SciChart.Core.Framework.IHitTestable" /> element
            </summary>
            <param name="point">The input point relative to this <see cref="T:SciChart.Core.Framework.IHitTestable" /></param>
            <param name="relativeTo">The other <see cref="T:SciChart.Core.Framework.IHitTestable" /> to use when transforming the point</param>
            <returns>The transformed Point</returns>
        </member>
        <member name="M:SciChart.Core.Framework.IHitTestable.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:SciChart.Core.Framework.IHitTestable" /> element
            </summary>
            <param name="point">The point to test</param>
            <returns>true if the Point is within the bounds</returns>
        </member>
        <member name="M:SciChart.Core.Framework.IHitTestable.GetBoundsRelativeTo(SciChart.Core.Framework.IHitTestable)">
            <summary>
            Gets the bounds of the current <see cref="T:SciChart.Core.Framework.IHitTestable" /> element relative to another <see cref="T:SciChart.Core.Framework.IHitTestable" /> element
            </summary>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Core.Framework.IInvalidatableElement">
            <summary>
            Types which implement IInvalidatableElement can be invalidated (redrawn)
            </summary>
        </member>
        <member name="M:SciChart.Core.Framework.IInvalidatableElement.InvalidateElement">
            <summary>
            Asynchronously requests that the element redraws itself plus children. 
            Will be ignored if the element is ISuspendable and currently IsSuspended (within a SuspendUpdates/ResumeUpdates call)
            </summary>
        </member>
        <member name="T:SciChart.Core.Framework.ISuspendable">
            <summary>
            Types which implement ISuspendable can have updates suspended/resumed. Useful for batch operations 
            </summary>
        </member>
        <member name="P:SciChart.Core.Framework.ISuspendable.IsSuspended">
            <summary>
            Gets a value indicating whether updates for the target are currently suspended
            </summary>
        </member>
        <member name="M:SciChart.Core.Framework.ISuspendable.SuspendUpdates">
            <summary>
            Suspends drawing updates on the target until the returned object is disposed, when a final draw call will be issued
            </summary>
            <returns>The disposable Update Suspender</returns>
        </member>
        <member name="M:SciChart.Core.Framework.ISuspendable.ResumeUpdates(SciChart.Core.Framework.IUpdateSuspender)">
            <summary>
            Resumes updates on the target, intended to be called by IUpdateSuspender
            </summary>
        </member>
        <member name="M:SciChart.Core.Framework.ISuspendable.DecrementSuspend">
            <summary>
            Called by IUpdateSuspender each time a target suspender is disposed. When the final
            target suspender has been disposed, ResumeUpdates is called
            </summary>
        </member>
        <member name="T:SciChart.Core.Framework.IUpdateSuspender">
            <summary>
            Defines the interface to an <see cref="T:SciChart.Core.Framework.UpdateSuspender" />, a disposable class which allows nested suspend/resume operations on an <see cref="T:SciChart.Core.Framework.ISuspendable" /> target
            </summary>
        </member>
        <member name="P:SciChart.Core.Framework.IUpdateSuspender.IsSuspended">
            <summary>
            Gets a value indicating whether updates for this instance are currently suspended
            </summary>
        </member>
        <member name="P:SciChart.Core.Framework.IUpdateSuspender.ResumeTargetOnDispose">
            <summary>
            Gets or sets a value indicating whether the target will resume when the IUpdateSuspender is disposed. Default is True
            </summary>
        </member>
        <member name="P:SciChart.Core.Framework.IUpdateSuspender.Tag">
            <summary>
            Gets or sets an associated Tab for this <see cref="T:SciChart.Core.Framework.IUpdateSuspender" /> instance
            </summary>
        </member>
        <member name="T:SciChart.Core.Framework.UpdateSuspender">
            <summary>
            A disposable class which allows nested suspend/resume operations on an <see cref="T:SciChart.Core.Framework.ISuspendable" /> target
            </summary>
        </member>
        <member name="M:SciChart.Core.Framework.UpdateSuspender.#ctor(SciChart.Core.Framework.ISuspendable,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Core.Framework.UpdateSuspender" /> class.
            </summary>
            <param name="target">The target.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:SciChart.Core.Framework.UpdateSuspender.#ctor(SciChart.Core.Framework.ISuspendable)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Core.Framework.UpdateSuspender" /> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="P:SciChart.Core.Framework.UpdateSuspender.IsSuspended">
            <summary>
            Gets a value indicating whether updates for this instance are currently suspended
            </summary>
        </member>
        <member name="P:SciChart.Core.Framework.UpdateSuspender.ResumeTargetOnDispose">
            <summary>
            Gets or sets a value indicating whether the target will resume when the IUpdateSuspender is disposed. Default is True
            </summary>
        </member>
        <member name="M:SciChart.Core.Framework.UpdateSuspender.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:SciChart.Core.Framework.UpdateSuspender.Tag">
            <summary>
            Gets or sets an associated Tab for this <see cref="T:SciChart.Core.Framework.IUpdateSuspender" /> instance
            </summary>
        </member>
        <member name="M:SciChart.Core.Framework.UpdateSuspender.GetIsSuspended(SciChart.Core.Framework.ISuspendable)">
            <summary>
            Thread-safe gets if an instance is currently suspended
            </summary>
            <param name="target">The target.</param>
            <returns>True, if the instance is currently suspended</returns>
        </member>
        <member name="T:SciChart.Core.ExportType">
            <summary>
            Provides values for exporting snapshot of a <see cref="T:System.Windows.UIElement" /> to file.
            </summary>
        </member>
        <member name="F:SciChart.Core.ExportType.Png">
            <summary>
            Export in PNG format
            </summary>
        </member>
        <member name="F:SciChart.Core.ExportType.Jpeg">
            <summary>
            Export in JPEG format
            </summary>
        </member>
        <member name="F:SciChart.Core.ExportType.Bmp">
            <summary>
            Export in BMP format
            </summary>
        </member>
        <member name="F:SciChart.Core.ExportType.Xps">
            <summary>
            Export in XPS format
            </summary>
        </member>
        <member name="T:SciChart.Core.DoubleAnimator">
            <summary>
            Fluent API class for animating a double DependencyProperty from and to a value
            </summary>
        </member>
        <member name="M:SciChart.Core.DoubleAnimator.WithTarget(System.Windows.UIElement)">
            <summary>
            Sets the target element 
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.DoubleAnimator.WithFromTo(System.Double,System.Double)">
            <summary>
            Sets the From and To values
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.DoubleAnimator.WithTargetProperty(System.String)">
            <summary>
            Sets the Target Property to animate
            </summary>
            <param name="targetProperty">The target property.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.DoubleAnimator.WithDuration(System.TimeSpan)">
            <summary>
            Sets the animation duration
            </summary>
            <param name="duration">The duration.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.DoubleAnimator.WithCompletedHandler(System.EventHandler)">
            <summary>
            Sets the Completed Handler
            </summary>
            <param name="handler">The handler.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.DoubleAnimator.WithEasing(System.Windows.Media.Animation.IEasingFunction)">
            <summary>
            Sets the Easing Func
            </summary>
            <param name="easingFunction">The easing function.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.DoubleAnimator.Go">
            <summary>
            Starts the animator
            </summary>
        </member>
        <member name="F:SciChart.Core.NativeLibraryConfig.Method">
            <summary>
            Load method : either directly from disk, from resource into disk
            </summary>
        </member>
        <member name="F:SciChart.Core.NativeLibraryConfig.ResourceName">
            <summary>
            name of resource to locate in assembly
            </summary>
        </member>
        <member name="F:SciChart.Core.NativeLibraryConfig.FileSystemPath">
            <summary>
            File system path, will be used to dump file in case of resources
            </summary>
        </member>
        <member name="F:SciChart.Core.NativeLibraryConfig.assembly">
            <summary>
            The assembly
            </summary>
        </member>
        <member name="F:SciChart.Core.NativeLibraryConfig.Overwrite">
            <summary>
            Overwrite existing dll or not 
            </summary>
        </member>
        <member name="P:SciChart.Core.NativeDllLoader.DependenciesPathRoot">
            <summary>
                <para>The dependenciesPathRoot is the root path where SciChart will write out native DLL dependencies during startup. Make sure that this path has write access. The default is %USER%/Appdata/Local/SciChart/Dependencies</para>
                <para>To change the path, set this property once before any other SciChart function or method is called, including SciChartSurface.SetRuntimeLicenseKey.</para>
                <para>SciChart will create subfolders for environment and version number inside this folder.</para>
            </summary>
        </member>
        <member name="M:SciChart.Core.NativeDllLoader.#cctor">
            <summary>
            Initializes the <see cref="T:SciChart.Core.NativeDllLoader" /> class.
            </summary>
        </member>
        <member name="T:SciChart.Core.ObjectPool`1">
            <summary>
            Represents a pool of objects with a size limit.
            </summary>
            <typeparam name="T">The type of object in the pool.</typeparam>
        </member>
        <member name="M:SciChart.Core.ObjectPool`1.#ctor">
            <summary>
            Initializes a new instance of the ObjectPool class.
            </summary>
        </member>
        <member name="M:SciChart.Core.ObjectPool`1.#ctor(System.Int32,System.Func{`0,`0})">
            <summary>
            Initializes a new instance of the ObjectPool class.
            </summary>
        </member>
        <member name="P:SciChart.Core.ObjectPool`1.Count">
            <summary>
            Gets the summary amount of created instances
            </summary>
        </member>
        <member name="P:SciChart.Core.ObjectPool`1.AvailableCount">
            <summary>
            Gets the amount of pooled instances
            </summary>
        </member>
        <member name="P:SciChart.Core.ObjectPool`1.IsEmpty">
            <summary>
            Gets the value indicating whether current ObjectPool instance is empty.
            </summary>
        </member>
        <member name="M:SciChart.Core.ObjectPool`1.Get">
            <summary>
            Retrieves an item from the pool. 
            </summary>
            <returns>The item retrieved from the pool.</returns>
        </member>
        <member name="M:SciChart.Core.ObjectPool`1.Get(System.Func{`0,`0})">
            <summary>
            Retrieves an item from the pool. 
            </summary>
            <returns>The item retrieved from the pool.</returns>
        </member>
        <member name="M:SciChart.Core.ObjectPool`1.Get(System.Func{`0})">
            <summary>
            Retrieves an item from the pool. 
            </summary>
            <returns>The item retrieved from the pool.</returns>
        </member>
        <member name="M:SciChart.Core.ObjectPool`1.Put(`0)">
            <summary>
            Places an item in the pool.
            </summary>
            <param name="item">The item to place to the pool.</param>
        </member>
        <member name="M:SciChart.Core.ObjectPool`1.Dispose">
            <summary>
            Disposes of items in the pool that implement IDisposable.
            </summary>
        </member>
        <member name="T:SciChart.Core.MarkupExtensions.MultiBindingCompatible">
            <summary>
            Cross platform MultiBinding implementation
            </summary>
        </member>
        <member name="T:SciChart.Core.Messaging.IEventAggregator">
            <summary>
            Defines the interface to a lightweight Event Aggregator used within SciChart for inter-component communication
            </summary>
        </member>
        <member name="T:SciChart.Core.Messaging.LoggedMessageBase">
            <summary>
            Base class for automatically logged Event Aggregator messages
            </summary>
        </member>
        <member name="M:SciChart.Core.Messaging.LoggedMessageBase.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the MessageBase class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <remarks></remarks>
        </member>
        <member name="T:SciChart.Core.Messaging.RenderSurfaceResizedMessage">
            <summary>
            Event message when RenderSurface is resized
            </summary>
        </member>
        <member name="M:SciChart.Core.Messaging.RenderSurfaceResizedMessage.#ctor(System.Object,System.Windows.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Core.Messaging.RenderSurfaceResizedMessage" /> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="viewportSize">Size of the viewport.</param>
        </member>
        <member name="P:SciChart.Core.Messaging.RenderSurfaceResizedMessage.ViewportSize">
            <summary>
            Gets the size of the viewport.
            </summary>
            <value>
            The size of the viewport.
            </value>
        </member>
        <member name="T:SciChart.Core.Messaging.CoordinateSystemMessage">
            <summary>
            Event message when CoordinateSystem changes
            </summary>
        </member>
        <member name="M:SciChart.Core.Messaging.CoordinateSystemMessage.#ctor(System.Object,SciChart.Core.Messaging.CoordinateSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Core.Messaging.CoordinateSystemMessage" /> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="coordinateSystem">The coordinate system.</param>
        </member>
        <member name="P:SciChart.Core.Messaging.CoordinateSystemMessage.CoordinateSystem">
            <summary>
            Gets the coordinate system.
            </summary>
            <value>
            The coordinate system.
            </value>
        </member>
        <member name="T:SciChart.Core.Messaging.CoordinateSystem">
            <summary>
            The CoordinateSystem
            </summary>
        </member>
        <member name="F:SciChart.Core.Messaging.CoordinateSystem.Cartesian">
            <summary>
            The cartesian CoordinateSystem
            </summary>
        </member>
        <member name="F:SciChart.Core.Messaging.CoordinateSystem.Polar">
            <summary>
            The polar CoordinateSystem
            </summary>
        </member>
        <member name="T:SciChart.Core.Utility.CompositionSyncedDelegate">
            <summary>
            Allows synchronizing a Delegate with the <see cref="E:System.Windows.Media.CompositionTarget.Rendering" /> event
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.CompositionSyncedDelegate.Create(System.Action)">
            <summary>
            Creates a new instance of the <see cref="T:SciChart.Core.Utility.CompositionSyncedDelegate" /> class.
            </summary>
            <param name="operation">The operation.</param>
        </member>
        <member name="T:SciChart.Core.Utility.SciChartDebugLogger">
            <summary>
            Provides a debug logger which can be used to pipe debug messages from SciChart to your own code, by setting the <see cref="T:SciChart.Core.Utility.ISciChartLoggerFacade" /> via SetLogger
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.SciChartDebugLogger.Instance">
            <summary>
            Gets the singleton <see cref="T:SciChart.Core.Utility.SciChartDebugLogger" /> instance
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.SciChartDebugLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes a line to the <see cref="T:SciChart.Core.Utility.ISciChartLoggerFacade" />. By default, the facade instance is null. In this case nothing happens
            </summary>
            <remarks>Logging is performance intensive and will drastically slow down the chart.</remarks>
            <param name="formatString">The format string</param>
            <param name="args">Optional args for the format string</param>
        </member>
        <member name="M:SciChart.Core.Utility.SciChartDebugLogger.SetLogger(SciChart.Core.Utility.ISciChartLoggerFacade)">
            <summary>
            Sets the <see cref="T:SciChart.Core.Utility.ISciChartLoggerFacade" /> to write to. By default this is null, but after being set, the <see cref="T:SciChart.Core.Utility.SciChartDebugLogger" /> will write all output to this instance
            </summary>
            <param name="loggerFacade">The <see cref="T:SciChart.Core.Utility.ISciChartLoggerFacade" /> instance.</param>
            <remarks>Logging is performance intensive and will drastically slow down the chart. Enable only when necessary</remarks>
        </member>
        <member name="T:SciChart.Core.Utility.GuardConstraint">
            <summary>
            Allows assertions to be built with the following syntax: 
            <code>
            Guard.Assert(123).IsLessThan(456);
            </code></summary>
        </member>
        <member name="M:SciChart.Core.Utility.GuardConstraint.#ctor(System.IComparable,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Core.Utility.GuardConstraint" /> class.
            </summary>
            <param name="value">The value.</param>
            <param name="argName">Name of the arg.</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Core.Utility.GuardConstraint.IsLessThan(System.IComparable,System.String)">
            <summary>
            Asserts that the current value is less than the specified other value
            </summary>
            <param name="other">The other value.</param>
            <param name="otherArgName">Name of the other arg.</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Core.Utility.GuardConstraint.IsNotEqualTo(System.IComparable,System.String)">
            <summary>
            Asserts that the current value is not equal to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <param name="otherArgName">Name of the other arg.</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Core.Utility.GuardConstraint.IsEqualTo(System.IComparable,System.String)">
            <summary>
            Asserts that the current value is equal to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <param name="otherArgName">Name of the other arg.</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Core.Utility.GuardConstraint.IsNotEqualTo(System.IComparable)">
            <summary>
            Asserts that the current value is not equal to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Core.Utility.GuardConstraint.IsLessThanOrEqualTo(System.IComparable,System.String)">
            <summary>
            Asserts that the current value is less than or equal to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <param name="otherArgName">Name of the other arg.</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Core.Utility.GuardConstraint.IsGreaterThanOrEqualTo(System.IComparable)">
            <summary>
            Asserts that the current value is greater than or equal to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Core.Utility.GuardConstraint.IsGreaterThan(System.IComparable)">
            <summary>
            Asserts that the current value is greater to the specified other value
            </summary>
            <param name="other">The other value.</param>
            <remarks></remarks>
        </member>
        <member name="T:SciChart.Core.Utility.ISciChartLoggerFacade">
            <summary>
            Defines the interface to a logger facade. If you wish to receive debug log messages from SciChart, then set a logger instance via 
            <see cref="M:SciChart.Core.Utility.SciChartDebugLogger.SetLogger(SciChart.Core.Utility.ISciChartLoggerFacade)" />. Note that logging will dramatically decrease performance, especially in a real-time scenario
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.ISciChartLoggerFacade.Log(System.String,System.Object[])">
            <summary>
            Logs the string format message with optional arguments
            </summary>
            <param name="formatString">The formatting string</param>
            <param name="args">Optional arguments to the formatting string</param>
        </member>
        <member name="T:SciChart.Core.Utility.Mouse.IPublishMouseEvents">
            <summary>
            Defines the interface to a class which publishes mouse events. 
            Used in conjunction with <see cref="T:SciChart.Core.Utility.Mouse.IReceiveMouseEvents" /> and <see cref="T:SciChart.Core.Utility.Mouse.MouseManager" /> 
            to provide cross-platform WPF and Silverlight mouse eventing
            </summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishMouseEvents.KeyDown">
            <summary>
            Occurs when the KeyDown event occurs on this element
            </summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishMouseEvents.KeyUp">
            <summary>
            Occurs when the KeyUp event occurs on this element
            </summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishMouseEvents.MouseLeftButtonDown">
            <summary>
            Occurs when the left mouse button is pressed (or when the tip of the stylus touches the tablet) while the mouse pointer is over a <see cref="T:System.Windows.UIElement" />.
            </summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishMouseEvents.MouseLeftButtonUp">
            <summary>
            Occurs when the left mouse button is released (or the tip of the stylus is removed from the tablet) while the mouse (or the stylus) is over a <see cref="T:System.Windows.UIElement" /> (or while a <see cref="T:System.Windows.UIElement" /> holds mouse capture).
            </summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishMouseEvents.MouseRightButtonDown">
            <summary>
            Occurs when the right mouse button is pressed while the mouse pointer is over a <see cref="T:System.Windows.UIElement" />.
            </summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishMouseEvents.MouseRightButtonUp">
            <summary>
            Occurs when the right mouse button is released while the mouse pointer is over a <see cref="T:System.Windows.UIElement" />. However, this event will only be raised if a caller marks the preceding <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> event as handled; see Remarks.
            </summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishMouseEvents.MouseMove">
            <summary>
            Occurs when the coordinate position of the mouse (or stylus) changes while over a <see cref="T:System.Windows.UIElement" /> (or while a <see cref="T:System.Windows.UIElement" /> holds mouse capture).
            </summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishMouseEvents.MouseWheel">
            <summary>
            Occurs when the user rotates the mouse wheel while the mouse pointer is over a <see cref="T:System.Windows.UIElement" />, or the <see cref="T:System.Windows.UIElement" /> has focus.
            </summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishMouseEvents.MouseLeave">
            <summary>
            Occurs when the mouse pointer leaves the bounds of this element
            </summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishMouseEvents.MouseMiddleButtonDown">
            <summary>
            Occurs when the middle mouse button is pressed while the mouse pointer is over a <see cref="T:System.Windows.UIElement" />.
            </summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishMouseEvents.MouseMiddleButtonUp">
            <summary>
            Occurs when the middle mouse button is released while the mouse pointer is over a <see cref="T:System.Windows.UIElement" />. However, this event will only be raised if a caller marks the preceding <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> event as handled; see Remarks.
            </summary>
        </member>
        <member name="T:SciChart.Core.Utility.Mouse.IPublishTouchEvents">
            <summary>
            Defines the interface to a class which publishes touch events. 
            Used in conjunction with <see cref="T:SciChart.Core.Utility.Mouse.IReceiveTouchEvents" /> and <see cref="T:SciChart.Core.Utility.Mouse.MouseManager" /> 
            to provide WPF touch interaction with Chart Modifiers
            </summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishTouchEvents.TouchDown">
            <summary>
            Occurs when an input device begins a manipulation on the <see cref="T:System.Windows.UIElement" />.
            </summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishTouchEvents.TouchMove">
            <summary>
            Occurs when an input device changes position during manipulation.
            </summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishTouchEvents.TouchUp">
            <summary>
            Occurs when a manipulation and inertia on the <see cref="T:System.Windows.UIElement" /> object is complete.
            </summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishTouchEvents.ManipulationStarting">
            <summary>
            Occurs when an input device begins a manipulation on the <see cref="T:System.Windows.UIElement" /></summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishTouchEvents.ManipulationStarted">
            <summary>
            Occurs when an input device begins a manipulation on the <see cref="T:System.Windows.UIElement" /></summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishTouchEvents.ManipulationCompleted">
            <summary>
            Occurs when a manipulation and inertia on the System.Windows.UIElement object is complete.
            </summary>
        </member>
        <member name="E:SciChart.Core.Utility.Mouse.IPublishTouchEvents.ManipulationDelta">
            <summary>
            Occurs when the input device changes position during a manipulation.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:SciChart.Core.Utility.Mouse.IPublishTouchEvents.ManipulationInertiaStarting" -->
        <member name="P:SciChart.Core.Utility.Mouse.IPublishTouchEvents.RegisterTouchEvents">
            <summary>
            When true, touch events are enabled, else disabled
            </summary>
        </member>
        <member name="T:SciChart.Core.Utility.Mouse.IReceiveMouseEvents">
            <summary>
            Defines the interface to a type which receives unified Mouse Events (cross-platform WPF and Silverlight).
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.IReceiveMouseEvents.IsEnabled">
            <summary>
            Gets or sets whether the mouse target is enabled.
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.IReceiveMouseEvents.MouseEventGroup">
            <summary>
            Gets or sets a Mouse Event Group, an ID used to share mouse events across multiple targets.
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveMouseEvents.CanReceiveMouseEvents">
            <summary>
            Returns a value indicating whether mouse events should be propagated to the mouse target.
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveMouseEvents.ResetKeyboardFocus">
            <summary>
            Sets a keyboard focus on a parent root element of the mouse target.
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveMouseEvents.OnModifierDoubleClick(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when a Mouse DoubleClick occurs.
            </summary>
            <param name="e">Arguments detailing the mouse button operation.</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveMouseEvents.OnModifierMouseDown(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is pressed.
            </summary>
            <param name="e">Arguments detailing the mouse button operation.</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveMouseEvents.OnModifierMouseMove(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when the Mouse is moved.
            </summary>
            <param name="e">Arguments detailing the mouse move operation.</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveMouseEvents.OnModifierMouseUp(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when a Mouse Button is released.
            </summary>
            <param name="e">Arguments detailing the mouse button operation.</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveMouseEvents.OnModifierMouseWheel(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when the Mouse Wheel is scrolled.
            </summary>
            <param name="e">Arguments detailing the mouse wheel operation.</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveMouseEvents.OnMasterMouseLeave(SciChart.Core.Utility.Mouse.ModifierMouseArgs)">
            <summary>
            Called when the MouseLeave event is fired for a Master of current <see cref="P:SciChart.Core.Utility.Mouse.IReceiveMouseEvents.MouseEventGroup" />.
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveMouseEvents.OnModifierKeyDown(SciChart.Core.Utility.Mouse.ModifierKeyArgs)">
            <summary>
            Called when the KeyDown event is fired for the Master of the current <see cref="P:SciChart.Core.Utility.Mouse.IReceiveMouseEvents.MouseEventGroup" /></summary>
            <param name="e">Arguments detailing the key event</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveMouseEvents.OnModifierKeyUp(SciChart.Core.Utility.Mouse.ModifierKeyArgs)">
            <summary>
            Called when the KeyUp event is fired for the Master of the current <see cref="P:SciChart.Core.Utility.Mouse.IReceiveMouseEvents.MouseEventGroup" /></summary>
            <param name="e">Arguments detailing the key event</param>
        </member>
        <member name="T:SciChart.Core.Utility.Mouse.IReceiveTouchEvents">
            <summary>
            Defines the interface to a type which receives WPF4 Touch Events
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveTouchEvents.OnModifierTouchDown(SciChart.Charting.ChartModifiers.ModifierTouchArgs)">
            <summary>
            Called when a Touch Down event is registered
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveTouchEvents.OnModifierTouchMove(SciChart.Charting.ChartModifiers.ModifierTouchArgs)">
            <summary>
            Called after each touch position change during a manipulation.
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveTouchEvents.OnModifierTouchUp(SciChart.Charting.ChartModifiers.ModifierTouchArgs)">
            <summary>
            Called when a Touch Up is complete.
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveTouchEvents.OnModifierTouchManipulationStarting(SciChart.Charting.ChartModifiers.ModifierManipulationStartingArgs)">
            <summary>
            Called when a manipulation is starting
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveTouchEvents.OnModifierTouchManipulationStarted(SciChart.Charting.ChartModifiers.ModifierManipulationStartedArgs)">
            <summary>
            Called when a manipulation is starting
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveTouchEvents.OnModifierTouchManipulationCompleted(SciChart.Charting.ChartModifiers.ModifierManipulationCompletedArgs)">
            <summary>
            Called when a manipulation is completed
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveTouchEvents.OnModifierTouchManipulationDelta(SciChart.Charting.ChartModifiers.ModifierManipulationDeltaArgs)">
            <summary>
            Called when a touch manipulation delta occurs
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IReceiveTouchEvents.OnModifierTouchManipulationInertiaStarting(SciChart.Charting.ChartModifiers.ModifierManipulationInertiaStartingArgs)">
            <summary>
            Called when a manipulation ineritia is starting
            </summary>
            <param name="e">Arguments detailing the manipulation operation.</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.ManipulationCompatibilityExtensions.ManipulationOrigin(System.Windows.Input.ManipulationStartedEventArgs)">
            <summary>
            Gets the origin point from <see cref="T:System.Windows.Input.ManipulationStartedEventArgs" /></summary>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.ManipulationCompatibilityExtensions.ManipulationOrigin(System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            Gets the origin point from <see cref="T:System.Windows.Input.ManipulationDeltaEventArgs" /></summary>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.ManipulationCompatibilityExtensions.CumulativeManipulation(System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            Gets the Cumulative Manipulation from <see cref="T:System.Windows.Input.ManipulationDeltaEventArgs" /></summary>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.ManipulationCompatibilityExtensions.DeltaManipulation(System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            Gets the Delta Manipulation from <see cref="T:System.Windows.Input.ManipulationDeltaEventArgs" /></summary>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.ManipulationCompatibilityExtensions.Manipulators(System.Windows.Input.ManipulationDeltaEventArgs)">
            <summary>
            Gets the collection of Manipulators from <see cref="T:System.Windows.Input.ManipulationDeltaEventArgs" /></summary>
        </member>
        <member name="T:SciChart.Core.Utility.Mouse.ModifierKeyArgs">
            <summary>
            Cross platform Key Event Args, used by various classes within SciChart to process key events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.ModifierKeyArgs.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.ModifierKeyArgs.Modifier">
            <summary>
            Gets or sets the Modifier Key that was pressed at the time of the event
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.ModifierKeyArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Core.Utility.Mouse.ModifierKeyArgs" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.ModifierKeyArgs.#ctor(System.Boolean,SciChart.Core.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Core.Utility.Mouse.ModifierKeyArgs" /> class.
            </summary>
            <param name="isMaster">if set to <c>true</c> the event came from a master chart surface, else it came from a slave.</param>
            <param name="master">The master chart instance.</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.ModifierKeyArgs.#ctor(System.Windows.Input.Key,SciChart.Core.Utility.Mouse.MouseModifier,System.Boolean,SciChart.Core.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Core.Utility.Mouse.ModifierKeyArgs" /> class.
            </summary>
            <param name="key">The key.</param>
            <param name="modifier">The modifier.</param>
            <param name="isMaster">if set to <c>true</c> the event came from a master chart surface, else it came from a slave.</param>
            <param name="master">The master chart instance.</param>
        </member>
        <member name="T:SciChart.Core.Utility.Mouse.ModifierMouseArgs">
            <summary>
            Defines a cross-platform Mouse event args, used by various classes within SciChart to process mouse events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.ModifierMouseArgs.Delta">
            <summary>
            Gets or sets the mouse wheel delta
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.ModifierMouseArgs.MousePoint">
            <summary>
            Gets or sets the mouse point that this event occurred at
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.ModifierMouseArgs.MouseButtons">
            <summary>
            Gets or sets the MouseButtons that were pressed at the time of the event
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.ModifierMouseArgs.Modifier">
            <summary>
            Gets or sets the Modifier Key that was pressed at the time of the event
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.ModifierMouseArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Core.Utility.Mouse.ModifierMouseArgs" /> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.ModifierMouseArgs.#ctor(System.Windows.Point,SciChart.Core.Utility.Mouse.MouseButtons,SciChart.Core.Utility.Mouse.MouseModifier,System.Boolean,SciChart.Core.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Core.Utility.Mouse.ModifierMouseArgs" /> class.
            </summary>
            <param name="mousePoint">The mouse point that this event occurred at relative to the chart root grid.</param>
            <param name="mouseButtons">The mouse buttons clicked.</param>
            <param name="modifier">The modifier key pressed.</param>
            <param name="isMaster">If True, then this mouse event occurred on a master ChartModifierBase. 
            Used to process which modifier was the source of an event when multiple modifiers are linked</param>
            <param name="master">The instance of the master ChartModifierBase which sourced the event. Default value is null</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.ModifierMouseArgs.#ctor(System.Windows.Point,SciChart.Core.Utility.Mouse.MouseButtons,SciChart.Core.Utility.Mouse.MouseModifier,System.Int32,System.Boolean,SciChart.Core.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Core.Utility.Mouse.ModifierMouseArgs" /> class.
            </summary>
            <param name="mousePoint">The mouse point that this event occurred at relative to the chart root grid.</param>
            <param name="mouseButtons">The mouse buttons clicked.</param>
            <param name="modifier">The modifier key pressed.</param>
            <param name="wheelDelta">The mouse wheel delta.</param>
            <param name="isMaster">If True, then this mouse event occurred on a master ChartModifierBase. 
            Used to process which modifier was the source of an event when multiple modifiers are linked</param>
            <param name="master">The instance of the master ChartModifierBase which sourced the event. Default value is null</param>
            <remarks></remarks>
        </member>
        <member name="T:SciChart.Core.Utility.Mouse.MouseModifier">
            <summary>
            Specifies the Modifier button pressed at the time of a mouse operation
            </summary>
        </member>
        <member name="F:SciChart.Core.Utility.Mouse.MouseModifier.None">
            <summary>
            No modifiers were pressed
            </summary>
        </member>
        <member name="F:SciChart.Core.Utility.Mouse.MouseModifier.Shift">
            <summary>
            The SHIFT button was pressed
            </summary>
        </member>
        <member name="F:SciChart.Core.Utility.Mouse.MouseModifier.Ctrl">
            <summary>
            The CTRL button was pressed
            </summary>
        </member>
        <member name="F:SciChart.Core.Utility.Mouse.MouseModifier.Alt">
            <summary>
            The ALT button was pressed
            </summary>
        </member>
        <member name="T:SciChart.Core.Utility.Mouse.MouseButtons">
            <summary>
            Specifies the MouseButtons pressed at the time of a mouse operation
            </summary>
        </member>
        <member name="F:SciChart.Core.Utility.Mouse.MouseButtons.None">
            <summary>
            No buttons were pressed
            </summary>
        </member>
        <member name="F:SciChart.Core.Utility.Mouse.MouseButtons.Left">
            <summary>
            The LEFT button was pressed
            </summary>
        </member>
        <member name="F:SciChart.Core.Utility.Mouse.MouseButtons.Middle">
            <summary>
            The MIDDLE button was pressed
            </summary>
        </member>
        <member name="F:SciChart.Core.Utility.Mouse.MouseButtons.Right">
            <summary>
            The RIGHT button was pressed
            </summary>
        </member>
        <member name="T:SciChart.Core.Utility.Mouse.MouseDelegates">
            <summary>
            Proxy class to handle mouse-events between a type which implements <see cref="T:SciChart.Core.Utility.Mouse.IPublishMouseEvents" /> and <see cref="T:SciChart.Core.Utility.Mouse.IReceiveMouseEvents" /></summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.Target">
            <summary>
            The target element which will receive the notifications
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.KeyDownDelegate">
            <summary>
             A proxy delegate for KeyDown events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.KeyUpDelegate">
            <summary>
             A proxy delegate for KeyUp events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.MouseLeftUpDelegate">
            <summary>
            A proxy delegate for Mouse Left Up events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.MouseLeftDownDelegate">
            <summary>
            A proxy delegate for Mouse Left Down events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.MouseMoveDelegate">
            <summary>
            A proxy delegate for Mouse Move events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.MouseRightUpDelegate">
            <summary>
            A proxy delegate for Mouse Right Up events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.MouseRightDownDelegate">
            <summary>
            A proxy delegate for Mouse Right Down events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.MouseMiddleDownDelegate">
            <summary>
            A proxy delegate for Mouse Middle Down events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.MouseMiddleUpDelegate">
            <summary>
            A proxy delegate for Mouse Middle Up events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.MouseWheelDelegate">
            <summary>
            A proxy delegate for Mouse Wheel events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.MouseLeaveDelegate">
            <summary>
             A proxy delegate for Mouse Leave events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.TouchDownDelegate">
            <summary>
            A proxy delegate for Touch Down events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.TouchMoveDelegate">
            <summary>
            A proxy delegate for Touch Move events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.TouchUpDelegate">
            <summary>
            A proxy delegate for Touch Up events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.ManipulationStartingDelegate">
            <summary>
            A proxy delegate for ManipulationStarting events
            </summary>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseDelegates.ManipulationStartedDelegate">
            <summary>
            A proxy delegate for ManipulationStarting events
            </summary>
        </member>
        <member name="F:SciChart.Core.Utility.Mouse.MouseDelegates.ManipulationCompletedDelegate">
            <summary>
            A proxy delegate for ManipulationCompleted events
            </summary>
        </member>
        <member name="F:SciChart.Core.Utility.Mouse.MouseDelegates.ManipulationDeltaDelegate">
            <summary>
            A proxy delegate for ManipulationDelta events
            </summary>
        </member>
        <member name="F:SciChart.Core.Utility.Mouse.MouseDelegates.ManipulationInertiaStartingDelegate">
            <summary>
            A proxy delegate for ManipulationInertiaStarting events
            </summary>
        </member>
        <member name="T:SciChart.Core.Utility.Mouse.IMouseManager">
            <summary>
            Defines the interface to the MouseManager, a cross-platform helper class to propagate mouse events in both Silverlight and WPF 
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IMouseManager.Subscribe(SciChart.Core.Utility.Mouse.IPublishMouseEvents,SciChart.Core.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Subscribes to mouse events on the Source, propagating handlers to the Target
            </summary>
            <param name="source">The source of mouse events</param>
            <param name="target">The target to receive mouse event handlers</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IMouseManager.Unsubscribe(SciChart.Core.Utility.Mouse.IPublishMouseEvents)">
            <summary>
            Unsubscribes the source from mouse events
            </summary>
            <param name="element">The source to unsubscribe</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IMouseManager.Unsubscribe(SciChart.Core.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Unsubscribes the element from mouse events
            </summary>
            <param name="element">The element to unsubscribe</param>
        </member>
        <member name="T:SciChart.Core.Utility.Mouse.MouseManager">
            <summary>
            A cross-platform helper class to propagate mouse events in both Silverlight and WPF 
            </summary>
        </member>
        <member name="F:SciChart.Core.Utility.Mouse.MouseManager.MouseEventGroupProperty">
            <summary>
            Defines the MouseEventGroup Attached Property
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.MouseManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Core.Utility.Mouse.MouseManager" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.MouseManager.SetMouseEventGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the MouseEventGroup Attached Property
            </summary>
            <param name="element">The element.</param>
            <param name="modifierGroup">The modifier group.</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.MouseManager.GetMouseEventGroup(System.Windows.DependencyObject)">
            <summary>
            Gets the MouseEventGroup Attached Property
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.MouseManager.Subscribe(SciChart.Core.Utility.Mouse.IPublishMouseEvents,SciChart.Core.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Subscribes to mouse events on the Source, propagating handlers to the Target
            </summary>
            <param name="source">The source of mouse events</param>
            <param name="target">The target to receive mouse event handlers</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.MouseManager.Unsubscribe(SciChart.Core.Utility.Mouse.IPublishMouseEvents)">
            <summary>
            Unsubscribes the source from subscribers
            </summary>
            <param name="source">The source to unsubscribe</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.MouseManager.Unsubscribe(SciChart.Core.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Unsubscribes the element from mouse events
            </summary>
            <param name="element">The element to unsubscribe</param>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.MouseManager.GetTargets(SciChart.Core.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Gets the Targets that should receive mouse events (in the same <see cref="F:SciChart.Core.Utility.Mouse.MouseManager.MouseEventGroupProperty" /> based on the current provided target
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:SciChart.Core.Utility.Mouse.MouseManager.SubscribersBySource">
            <summary>
            USED INTERNALLY FOR TESTS. DO NOT MODIFY. Gets subscribers by source
            </summary>
        </member>
        <member name="T:SciChart.Core.Utility.Mouse.IMousePositionProvider">
            <summary>
            An interface to a provider which converts <see cref="T:System.Windows.Input.MouseEventArgs" /> into <see cref="T:System.Windows.Point" /> coordinates. Used
            internally to SciChart and implemented with interface to enable mocking and testing
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.Mouse.IMousePositionProvider.GetPosition(SciChart.Core.Utility.Mouse.IPublishMouseEvents,System.Windows.Input.MouseEventArgs)">
            <summary>
            Gets the mouse position from the <see cref="T:System.Windows.Input.MouseEventArgs" /> as a <see cref="T:System.Windows.Point" /> (pixel coordinates relative to <see cref="T:SciChart.Core.Utility.Mouse.IPublishMouseEvents">source</see></summary>
            <param name="source"></param>
            <param name="e"></param>
            <returns>The mouse position as a <see cref="T:System.Windows.Point" /></returns>
        </member>
        <member name="T:SciChart.Core.Utility.IServiceContainer">
            <summary>
            Defines the interface to a ServiceContainer used throughout SciChart. For a full list of available services, see the remarks on <see cref="T:SciChart.Core.Utility.ServiceContainer" /></summary>
        </member>
        <member name="M:SciChart.Core.Utility.IServiceContainer.GetService``1">
            <summary>
            Gets the service instance registered by type. For a full list of available services, see the remarks on <see cref="T:SciChart.Core.Utility.ServiceContainer" /></summary>
            <typeparam name="T">The type of service to get </typeparam>
            <returns>The service instance, unique to this <see cref="T:SciChart.Core.Utility.IServiceContainer" /> instance</returns>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Core.Utility.IServiceContainer.RegisterService``1(``0)">
            <summary>
            Registers the service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Core.Utility.IServiceContainer.DeRegisterService``1">
            <summary>
            Deregisters service of type T
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SciChart.Core.Utility.IServiceContainer.HasService``1">
            <summary>
            Determines whether this instance has the service of type <typeparamref name="T" /></summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:SciChart.Core.Utility.ServiceContainer">
            <summary>
            Provides a container with access to shared services throught SciChart components
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.ServiceContainer.HasService``1">
            <summary>
            Determines whether this instance has the service of type <typeparamref name="T" /></summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Utility.ServiceContainer.RegisterService``1(``0)">
            <summary>
            Registers the service.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Core.Utility.ServiceContainer.DeRegisterService``1">
            <summary>
            Deregisters service of type T
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SciChart.Core.Utility.ServiceContainer.GetService``1">
            <summary>
            Gets the service instance registered by type. For a full list of available services, see the remarks on <see cref="T:SciChart.Core.Utility.ServiceContainer" /></summary>
            <typeparam name="T">The type of service to get</typeparam>
            <remarks></remarks>
        </member>
        <member name="T:SciChart.Core.Utility.TimedMethodThread">
            <summary>
            Enumeration constants to define what thread a <see cref="T:SciChart.Core.Utility.TimedMethod" /> is invoked on
            </summary>
        </member>
        <member name="F:SciChart.Core.Utility.TimedMethodThread.UIThread">
            <summary>
            Invoke actions on the UI Thread
            </summary>
        </member>
        <member name="F:SciChart.Core.Utility.TimedMethodThread.Background">
            <summary>
            Invoke actions on a background thread
            </summary>
        </member>
        <member name="T:SciChart.Core.Utility.TimedMethod">
            <summary>
            TimedMethod allows an Action to be invoked after a specific period of time. Returns a cancellation token which can be cancelled before the method is invoked
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.TimedMethod.Invoke(System.Action)">
            <summary>
            Invokes the specified action. use Fluent API .After .OnThread to specify other options
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Utility.TimedMethod.After(System.Int32)">
            <summary>
            Invokes the specified action after N milliseconds. Use Fluent API .OnThread to specify other options
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Utility.TimedMethod.OnThread(SciChart.Core.Utility.TimedMethodThread)">
            <summary>
            Invokes the specified action on a specific thread
            </summary>
            <param name="thread">The thread to execute on</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Core.Utility.TimedMethod.Dispose">
            <summary>
            Cancels the Timedmethod and disposes timers
            </summary>
        </member>
        <member name="M:SciChart.Core.Utility.TimedMethod.Go">
            <summary>
            Starts the timed-method operation
            </summary>
            <returns></returns>
        </member>
        <member name="T:SciChart.Charting.ChartModifiers.ModifierEventArgsBase">
            <summary>
            Defines a ModifierEventArgsBase, which provides a set of properties and methods which are common to all derived classes
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierEventArgsBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierEventArgsBase" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierEventArgsBase.#ctor(SciChart.Core.Utility.Mouse.IReceiveMouseEvents,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierEventArgsBase" /> class.
            </summary>
            <param name="source">The source.</param>
            <param name="isMaster">if set to <c>true</c> [is master].</param>
        </member>
        <member name="P:SciChart.Charting.ChartModifiers.ModifierEventArgsBase.IsMaster">
            <summary>
            If True, then this mouse event occurred on a master ChartModifierBase. 
            Used to process which modifier was the source of an event when multiple modifiers are linked
            </summary>
        </member>
        <member name="P:SciChart.Charting.ChartModifiers.ModifierEventArgsBase.Handled">
            <summary>
            Gets or sets whether this event is Handled. If true, no further modifiers will be informed of the mouse event and mouse events will cease bubbling and tunnelling
            </summary>
        </member>
        <member name="P:SciChart.Charting.ChartModifiers.ModifierEventArgsBase.Source">
            <summary>
            In the case where e.Master is true, this returns the instance of the master chart modifier
            </summary>
        </member>
        <member name="T:SciChart.Charting.ChartModifiers.ModifierManipulationStartingArgs">
            <summary>
            Defines a cross-platform Manipulation event args, used by classes throughout Scichart process manipulation events.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationStartingArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierManipulationStartingArgs" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationStartingArgs.#ctor(System.Windows.UIElement,System.Windows.Input.ManipulationStartingEventArgs,System.Boolean,SciChart.Core.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierManipulationStartingArgs" /> class.
            </summary>
            <param name="args">The inner platform args.</param>
            <param name="isMaster">if set to <c>true</c>, this is a Master event, else Slave event.</param>
            <param name="master">The master instance in the case where charts are synchronized using <see cref="F:SciChart.Core.Utility.Mouse.MouseManager.MouseEventGroupProperty" />.</param>
        </member>
        <member name="P:SciChart.Charting.ChartModifiers.ModifierManipulationStartingArgs.Mode">
            <summary>
            Gets or sets which types of manipulations are possible.
            </summary>
        </member>
        <member name="P:SciChart.Charting.ChartModifiers.ModifierManipulationStartingArgs.Pivot">
            <summary>
            Gets or sets an object that describes the pivot for a single-point manipulation.
            </summary>
        </member>
        <member name="T:SciChart.Charting.ChartModifiers.ModifierManipulationStartedArgs">
            <summary>
            Defines a cross-platform Manipulation event args, used by classes throughout Scichart process manipulation events.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationStartedArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierManipulationStartedArgs" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationStartedArgs.#ctor(System.Windows.UIElement,System.Windows.Input.ManipulationStartedEventArgs,System.Boolean,SciChart.Core.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierManipulationStartedArgs" /> class.
            </summary>
            <param name="args">The inner platform args.</param>
            <param name="isMaster">if set to <c>true</c>, this is a Master event, else Slave event.</param>
            <param name="master">The master instance in the case where charts are synchronized using <see cref="F:SciChart.Core.Utility.Mouse.MouseManager.MouseEventGroupProperty" />.</param>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationStartedArgs.Cancel">
            <summary>
            Cancels the manipulation and promotes touch to mouse events.
            </summary>
            <returns>true if touch was successfully promoted to mouse events, otherwise, false.</returns>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationStartedArgs.Complete">
            <summary>
            Completes the manipulation without inertia.
            </summary>
        </member>
        <member name="T:SciChart.Charting.ChartModifiers.ModifierManipulationDeltaArgs">
            <summary>
            Defines a cross-platform Manipulation event args, used by classes throughout Scichart process manipulation events.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationDeltaArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierManipulationDeltaArgs" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationDeltaArgs.#ctor(System.Windows.UIElement,System.Windows.Input.ManipulationDeltaEventArgs,System.Boolean,SciChart.Core.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierManipulationDeltaArgs" /> class.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="args">The inner args.</param>
            <param name="isMaster">if set to <c>true</c>, this is a Master event, else Slave event.</param>
            <param name="master">The master instance in the case where charts are synchronized using <see cref="F:SciChart.Core.Utility.Mouse.MouseManager.MouseEventGroupProperty" />.</param>
        </member>
        <member name="P:SciChart.Charting.ChartModifiers.ModifierManipulationDeltaArgs.CumulativeManipulation">
            <summary>
             Gets the cumulated changes of the current manipulation.
            </summary>
            <value>
            The cumulated changes of the current manipulation.
            </value>
        </member>
        <member name="P:SciChart.Charting.ChartModifiers.ModifierManipulationDeltaArgs.DeltaManipulation">
            <summary>
            Gets the most recent changes of the current manipulation.
            </summary>
            <value>
            The most recent changes of the current manipulation.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SciChart.Charting.ChartModifiers.ModifierManipulationDeltaArgs.IsInertial" -->
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationDeltaArgs.Cancel">
            <summary>
            Cancels the manipulation and promotes touch to mouse events.
            </summary>
            <returns>true if touch was successfully promoted to mouse events, otherwise, false.</returns>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationDeltaArgs.StartInertia">
            <summary>
            Starts inertia on the manipulation by ignoring subsequent contact movements and raising the System.Windows.UIElement.ManipulationInertiaStarting event.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationDeltaArgs.Complete">
            <summary>
            Completes the manipulation without inertia.
            </summary>
        </member>
        <member name="T:SciChart.Charting.ChartModifiers.ModifierManipulationCompletedArgs">
            <summary>
            Defines a cross-platform Manipulation event args, used by classes throughout Scichart process manipulation events.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationCompletedArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierManipulationCompletedArgs" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationCompletedArgs.#ctor(System.Windows.UIElement,System.Windows.Input.ManipulationCompletedEventArgs,System.Boolean,SciChart.Core.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierManipulationCompletedArgs" /> class.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="args">The inner args.</param>
            <param name="isMaster">if set to <c>true</c>, this is a Master event, else Slave event.</param>
            <param name="master">The master instance in the case where charts are synchronized using <see cref="F:SciChart.Core.Utility.Mouse.MouseManager.MouseEventGroupProperty" />.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SciChart.Charting.ChartModifiers.ModifierManipulationCompletedArgs.IsInertial" -->
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationCompletedArgs.Cancel">
            <summary>
            Cancels the manipulation and promotes touch to mouse events.
            </summary>
            <returns>true if touch was successfully promoted to mouse events, otherwise, false.</returns>
        </member>
        <member name="T:SciChart.Charting.ChartModifiers.ModifierManipulationInertiaStartingArgs">
            <summary>
            Defines a cross-platform Manipulation event args, used by classes throughout Scichart process manipulation events.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationInertiaStartingArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierManipulationInertiaStartingArgs" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationInertiaStartingArgs.#ctor(System.Windows.UIElement,System.Windows.Input.ManipulationInertiaStartingEventArgs,System.Boolean,SciChart.Core.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierManipulationInertiaStartingArgs" /> class.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="args">The inner args.</param>
            <param name="isMaster">if set to <c>true</c>, this is a Master event, else Slave event.</param>
            <param name="master">The master instance in the case where charts are synchronized using <see cref="F:SciChart.Core.Utility.Mouse.MouseManager.MouseEventGroupProperty" />.</param>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationInertiaStartingArgs.Cancel">
            <summary>
            Cancels the manipulation and promotes touch to mouse events.
            </summary>
            <returns>true if touch was successfully promoted to mouse events, otherwise, false.</returns>
        </member>
        <member name="T:SciChart.Charting.ChartModifiers.ModifierManipulationArgs">
            <summary>
            Defines a cross-platform Manipulation event args, used by classes throughout Scichart process manipulation events.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierManipulationArgs" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierManipulationArgs.#ctor(System.Windows.UIElement,System.Windows.Point,System.Boolean,SciChart.Core.Utility.Mouse.IReceiveMouseEvents,System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator})">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierManipulationArgs" /> class.
            </summary>
            <param name="origin">The origin point for the manipulation event</param>
            <param name="isMaster">if set to <c>true</c>, this is a Master event, else Slave event.</param>
            <param name="master">The master instance in the case where charts are synchronized using <see cref="F:SciChart.Core.Utility.Mouse.MouseManager.MouseEventGroupProperty" />.</param>
            <param name="sender">The sender of the event</param>
        </member>
        <member name="P:SciChart.Charting.ChartModifiers.ModifierManipulationArgs.Sender">
            <summary>
            The sender of the Manipulation event 
            </summary>
        </member>
        <member name="P:SciChart.Charting.ChartModifiers.ModifierManipulationArgs.ManipulationOrigin">
            <summary>
            Gets the point from which the manipulation originated.
            </summary>
        </member>
        <member name="P:SciChart.Charting.ChartModifiers.ModifierManipulationArgs.Manipulators">
            <summary>
            Gets a collection of Manipulators which represent the touch-points in this manipulation operation
            </summary>
        </member>
        <member name="T:SciChart.Charting.ChartModifiers.ModifierTouchArgs">
            <summary>
            Defines a cross-platform Manipulation event args, used by classes throughout Scichart process manipulation events.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierTouchArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierTouchArgs" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierTouchArgs.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Input.TouchPoint},System.Boolean,SciChart.Core.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierTouchArgs" /> class.
            </summary>
            <param name="touchPoints">The touch points.</param>
            <param name="isMaster">if set to <c>true</c>, this is a Master event, else Slave event.</param>
            <param name="master">The master instance in the case where charts are synchronized using <see cref="F:SciChart.Core.Utility.Mouse.MouseManager.MouseEventGroupProperty" />.</param>
        </member>
        <member name="P:SciChart.Charting.ChartModifiers.ModifierTouchArgs.TouchPoints">
            <summary>
            Gets a collection of objects that represents the touch contacts for the manipulation.
            </summary>
        </member>
        <member name="T:SciChart.Charting.ChartModifiers.ModifierTouchManipulationArgs">
            <summary>
            Defines a cross-platform Manipulation event args, used by classes throughout Scichart process manipulation events.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierTouchManipulationArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierTouchManipulationArgs" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Charting.ChartModifiers.ModifierTouchManipulationArgs.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Input.TouchPoint},System.Boolean,SciChart.Core.Utility.Mouse.IReceiveMouseEvents)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Charting.ChartModifiers.ModifierTouchManipulationArgs" /> class.
            </summary>
            <param name="touchPoints">The touch points.</param>
            <param name="isMaster">if set to <c>true</c>, this is a Master event, else Slave event.</param>
            <param name="master">The master instance in the case where charts are synchronized using <see cref="F:SciChart.Core.Utility.Mouse.MouseManager.MouseEventGroupProperty" />.</param>
        </member>
        <member name="P:SciChart.Charting.ChartModifiers.ModifierTouchManipulationArgs.Manipulators">
            <summary>
            Gets a collection of objects that represents the touch contacts for the manipulation.
            </summary>
        </member>
        <member name="T:TinyMessenger.ITinyMessage">
            <summary>
            A TinyMessage to be published/delivered by TinyMessenger
            </summary>
        </member>
        <member name="P:TinyMessenger.ITinyMessage.Sender">
            <summary>
            The sender of the message, or null if not supported by the message implementation.
            </summary>
        </member>
        <member name="T:TinyMessenger.TinyMessageBase">
            <summary>
            Base class for messages that provides weak refrence storage of the sender
            </summary>
        </member>
        <member name="P:TinyMessenger.TinyMessageBase.Sender">
            <summary>
            The sender of the message, or null if not supported by the message implementation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessageBase.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the MessageBase class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
        </member>
        <member name="T:TinyMessenger.GenericTinyMessage`1">
            <summary>
            Generic message with user specified content
            </summary>
            <typeparam name="TContent">Content type to store</typeparam>
        </member>
        <member name="P:TinyMessenger.GenericTinyMessage`1.Content">
            <summary>
            Contents of the message
            </summary>
        </member>
        <member name="M:TinyMessenger.GenericTinyMessage`1.#ctor(System.Object,`0)">
            <summary>
            Create a new instance of the GenericTinyMessage class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <param name="content">Contents of the message</param>
        </member>
        <member name="T:TinyMessenger.CancellableGenericTinyMessage`1">
            <summary>
            Basic "cancellable" generic message
            </summary>
            <typeparam name="TContent">Content type to store</typeparam>
        </member>
        <member name="P:TinyMessenger.CancellableGenericTinyMessage`1.Cancel">
            <summary>
            Cancel action
            </summary>
        </member>
        <member name="P:TinyMessenger.CancellableGenericTinyMessage`1.Content">
            <summary>
            Contents of the message
            </summary>
        </member>
        <member name="M:TinyMessenger.CancellableGenericTinyMessage`1.#ctor(System.Object,`0,System.Action)">
            <summary>
            Create a new instance of the CancellableGenericTinyMessage class.
            </summary>
            <param name="sender">Message sender (usually "this")</param>
            <param name="content">Contents of the message</param>
            <param name="cancelAction">Action to call for cancellation</param>
        </member>
        <member name="T:TinyMessenger.TinyMessageSubscriptionToken">
            <summary>
            Represents an active subscription to a message
            </summary>
        </member>
        <member name="M:TinyMessenger.TinyMessageSubscriptionToken.#ctor(TinyMessenger.ITinyMessengerHub,System.Type)">
            <summary>
            Initializes a new instance of the TinyMessageSubscriptionToken class.
            </summary>
        </member>
        <member name="M:TinyMessenger.TinyMessageSubscriptionToken.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:TinyMessenger.ITinyMessageSubscription">
            <summary>
            Represents a message subscription
            </summary>
        </member>
        <member name="P:TinyMessenger.ITinyMessageSubscription.SubscriptionToken">
            <summary>
            Token returned to the subscribed to reference this subscription
            </summary>
        </member>
        <member name="M:TinyMessenger.ITinyMessageSubscription.ShouldAttemptDelivery(TinyMessenger.ITinyMessage)">
            <summary>
            Whether delivery should be attempted.
            </summary>
            <param name="message">Message that may potentially be delivered.</param>
            <returns>True - ok to send, False - should not attempt to send</returns>
        </member>
        <member name="M:TinyMessenger.ITinyMessageSubscription.Deliver(TinyMessenger.ITinyMessage)">
            <summary>
            Deliver the message
            </summary>
            <param name="message">Message to deliver</param>
        </member>
        <member name="T:TinyMessenger.ITinyMessageProxy">
            <summary>
            Message proxy definition.
            
            A message proxy can be used to intercept/alter messages and/or
            marshall delivery actions onto a particular thread.
            </summary>
        </member>
        <member name="M:TinyMessenger.ITinyMessageProxy.Deliver(TinyMessenger.ITinyMessage,TinyMessenger.ITinyMessageSubscription)">
            <summary>
            Delivers the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="subscription">The subscription.</param>
            <remarks></remarks>
        </member>
        <member name="T:TinyMessenger.DefaultTinyMessageProxy">
            <summary>
            Default "pass through" proxy.
            
            Does nothing other than deliver the message.
            </summary>
        </member>
        <member name="P:TinyMessenger.DefaultTinyMessageProxy.Instance">
            <summary>
            Singleton instance of the proxy.
            </summary>
        </member>
        <member name="M:TinyMessenger.DefaultTinyMessageProxy.Deliver(TinyMessenger.ITinyMessage,TinyMessenger.ITinyMessageSubscription)">
            <summary>
            Delivers the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="subscription">The subscription.</param>
            <remarks></remarks>
        </member>
        <member name="T:TinyMessenger.TinyMessengerSubscriptionException">
            <summary>
            Thrown when an exceptions occurs while subscribing to a message type
            </summary>
        </member>
        <member name="M:TinyMessenger.TinyMessengerSubscriptionException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TinyMessenger.TinyMessengerSubscriptionException" /> class.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="reason">The reason.</param>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerSubscriptionException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TinyMessenger.TinyMessengerSubscriptionException" /> class.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="reason">The reason.</param>
            <param name="innerException">The inner exception.</param>
            <remarks></remarks>
        </member>
        <member name="T:TinyMessenger.ITinyMessengerHub">
            <summary>
            Messenger hub responsible for taking subscriptions/publications and delivering of messages.
            </summary>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            All references are held with WeakReferences
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            All references (apart from the proxy) are held with WeakReferences
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Boolean)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Boolean,TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references (apart from the proxy) are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean,TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Unsubscribe``1(TinyMessenger.TinyMessageSubscriptionToken)">
            <summary>
            Unsubscribe from a particular message type.
            
            Does not throw an exception if the subscription is not found.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="subscriptionToken">Subscription token received from Subscribe</param>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.Publish``1(``0)">
            <summary>
            Publish a message to any subscribers
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.PublishAsync``1(``0)">
            <summary>
            Publish a message to any subscribers asynchronously
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:TinyMessenger.ITinyMessengerHub.PublishAsync``1(``0,System.AsyncCallback)">
            <summary>
            Publish a message to any subscribers asynchronously
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
            <param name="callback">AsyncCallback called on completion</param>
        </member>
        <member name="T:TinyMessenger.TinyMessengerHub">
            <summary>
            Messenger hub responsible for taking subscriptions/publications and delivering of messages.
            </summary>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            All references are held with strong references
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            All references (apart from the proxy) are held with strong references
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Boolean)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Boolean,TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean})">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references (apart from the proxy) are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean,TinyMessenger.ITinyMessageProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>TinyMessageSubscription used to unsubscribing</returns>
            <remarks></remarks>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Unsubscribe``1(TinyMessenger.TinyMessageSubscriptionToken)">
            <summary>
            Unsubscribe from a particular message type.
            
            Does not throw an exception if the subscription is not found.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="subscriptionToken">Subscription token received from Subscribe</param>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.Publish``1(``0)">
            <summary>
            Publish a message to any subscribers
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.PublishAsync``1(``0)">
            <summary>
            Publish a message to any subscribers asynchronously
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:TinyMessenger.TinyMessengerHub.PublishAsync``1(``0,System.AsyncCallback)">
            <summary>
            Publish a message to any subscribers asynchronously
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
            <param name="callback">AsyncCallback called on completion</param>
        </member>
    </members>
</doc>