<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SciChart.Drawing</name>
    </assembly>
    <members>
        <member name="T:SciChart.Drawing.Common.DrawEventArgs">
            <summary>
            EventArgs raised when the <see cref="E:SciChart.Drawing.Common.IRenderSurface.Draw" /> event is raised, which occurs at the start of the render pass
            </summary>
            <seealso cref="T:SciChart.Drawing.Common.IRenderSurface2D" />
            <seealso cref="T:SciChart.Drawing.Common.RenderSurfaceBase" />
            <seealso cref="T:SciChart.Drawing.HighQualityRasterizer.HighQualityRenderSurface" />
            <seealso cref="T:SciChart.Drawing.HighSpeedRasterizer.HighSpeedRenderSurface" />
        </member>
        <member name="M:SciChart.Drawing.Common.DrawEventArgs.#ctor(SciChart.Drawing.Common.IRenderSurface2D)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Drawing.Common.DrawEventArgs" /> class.
            </summary>
            <param name="renderSurface">The render surface.</param>
        </member>
        <member name="P:SciChart.Drawing.Common.DrawEventArgs.RenderSurface2D">
            <summary>
            Gets the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> instance which raised the Draw event
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.FontCacheKey">
            <summary>
            identifies cached rendered character
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.IBrush2D">
            <summary>
            Defines the interface to a 2D Brush used to paint fills on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
        </member>
        <member name="P:SciChart.Drawing.Common.IBrush2D.AlphaBlend">
            <summary>
            Gets whether fills painted with this brush should be alpha blended or not
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.IExtremeRenderContext2D">
            <summary>
            Defines the interface to a Extreme 2D RenderContext
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.IExtremeRenderContext2D.ViewportSize">
            <summary>
            Gets the current size of the viewport.
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.IExtremeRenderContext2D.DrawColoredSprites(SciChart.Drawing.Common.ISprite2D,SciChart.Data.ColoredVertex[],System.Int32,System.Int32)">
            <summary>
            Blits the sprite onto the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> with colors provided by vertices 
            </summary>
            <param name="sprite">The sprite to draw</param>
            <param name="vertices">The vertices to draw sprite at</param>
            <param name="startIndex">The start index in vertices array</param>
            <param name="count">The amount of vertices to draw</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IExtremeRenderContext2D.DrawLineStrip(SciChart.Drawing.Common.IPen2D,SciChart.Data.ColoredVertex[],System.Int32,System.Int32)">
            <summary>
            Draws colored line strip with colors provided by vertice
            </summary>
            <param name="pen">The pen to draw line strip with</param>
            <param name="vertices">The vertices to draw line strip</param>
            <param name="startIndex">The start index in vertices array</param>
            <param name="count">The amount of vertices to draw</param>
        </member>
        <member name="T:SciChart.Drawing.Common.IPathColor">
            <summary>
            A base interface for <see cref="T:SciChart.Drawing.Common.IPen2D" /> and <see cref="T:SciChart.Drawing.Common.IBrush2D" />. Used by the <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" /> to draw fills and lines
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.IPathColor.Color">
            <summary>
            Gets the color of the pen. Supports transparency
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.IPathColor.ColorCode">
            <summary>
            Used internally by the renderer, gets the integer color-code that represents the Pen color
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.IPathColor.IsTransparent">
            <summary>
            Gets a value indicating whether this pen is transparent.
            </summary>
            <value>
                <c>true</c> if this instance is transparent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SciChart.Drawing.Common.IPathContextFactory">
            <summary>
                <para>Creates <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" /> instances, e.g. to draw lines, points, polygon outlines depending on the final implementation. </para>
            </summary>
            <seealso cref="T:SciChart.Drawing.Common.IRenderContext2D" />
            <seealso cref="T:SciChart.Drawing.Common.IPathDrawingContext" />
        </member>
        <member name="M:SciChart.Drawing.Common.IPathContextFactory.Begin(SciChart.Drawing.Common.IPathColor,System.Double,System.Double)">
            <summary>
            Begins drawing at the specified X,Y pixel coordinate, with the specified color.
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.IPointMarkerPathContextFactory">
            <summary>
                <para>Creates <see cref="T:SciChart.Drawing.Common.IPointMarkerPathDrawingContext" /> instances, e.g. to draw points (ellipses, squares, triangles). </para>
            </summary>
            <seealso cref="T:SciChart.Drawing.Common.IRenderContext2D" />
            <seealso cref="T:SciChart.Drawing.Common.IPathDrawingContext" />
            <seealso cref="T:SciChart.Drawing.Common.IPointMarkerPathDrawingContext" />
        </member>
        <member name="M:SciChart.Drawing.Common.IPointMarkerPathContextFactory.Begin(SciChart.Drawing.Common.IPathColor,System.Double,System.Double,System.Int32)">
            <summary>
            Begins drawing at the specified X,Y pixel coordinate, with the specified color.
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.IPathDrawingContext">
            <summary>
            Returns an <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" /> to draw a polyline, or collection of PointMarkers 
            </summary>
            <example>
            The following example shows how to create a PathDrawingContext, move it and dispose to complete the path
            <code>
            var lineContext = renderContext.BeginLine(pen, 0, 0);
            lineContext.LineTo(1, 2);
            lineContext.LineTo(3, 4);
            lineContext.Dispose();
            </code></example>
        </member>
        <member name="M:SciChart.Drawing.Common.IPathDrawingContext.Begin(SciChart.Drawing.Common.IPathColor,System.Double,System.Double)">
            <summary>
            Starts the context at the specified X,Y coordinate with a specified Pen
            </summary>
            <param name="color">The pen or brush for the drawing operation</param>
            <param name="x">The x-coordinate in pixels</param>
            <param name="y">The y-coordinate in pixels</param>
            <returns>The <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" /> instance, to allow fluent API</returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IPathDrawingContext.MoveTo(System.Double,System.Double)">
            <summary>
            Moves the Context to the specified X,Y coordinate. 
            </summary>
            <param name="x">The x-coordinate in pixels</param>
            <param name="y">The y-coordinate in pixels</param>
            <returns>The <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" /> instance, to allow fluent API</returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IPathDrawingContext.End">
            <summary>
            Ends the segment, flushing to render target
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.IPointMarkerPathDrawingContext">
            <summary>
            Returns an <see cref="T:SciChart.Drawing.Common.IPointMarkerPathDrawingContext" /> to draw a polyline, or collection of PointMarkers 
            </summary>
            <example>
                <code>
            var lineContext = renderContext.BeginPoints(pen, 0, 0, 0);
            lineContext.LineTo(1, 2, 1);
            lineContext.LineTo(3, 4, 2);
            lineContext.Dispose();
            </code>
            </example>
        </member>
        <member name="M:SciChart.Drawing.Common.IPointMarkerPathDrawingContext.Begin(SciChart.Drawing.Common.IPathColor,System.Double,System.Double,System.Int32)">
            <summary>
            Starts the context at the specified X,Y coordinate with a specified Pen
            </summary>
            <param name="color">The pen or brush for the drawing operation</param>
            <param name="x">The x-coordinate in pixels</param>
            <param name="y">The y-coordinate in pixels</param>
            <param name="index">The index to the data.</param>
            <returns>
            The <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" /> instance, to allow fluent API
            </returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IPointMarkerPathDrawingContext.MoveTo(System.Double,System.Double,System.Int32)">
            <summary>
            Moves the Context to the specified X,Y coordinate.
            </summary>
            <param name="x">The x-coordinate in pixels</param>
            <param name="y">The y-coordinate in pixels</param>
            <param name="index">The index to the data.</param>
            <returns>
            The <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" /> instance, to allow fluent API
            </returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IPointMarkerPathDrawingContext.End">
            <summary>
            Ends the segment, flushing to render target
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.IPen2D">
            <summary>
            Defines the interface to a 2D pen, used to draw lines on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
        </member>
        <member name="P:SciChart.Drawing.Common.IPen2D.StrokeThickness">
            <summary>
            Gets the stroke thickness
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.IPen2D.Antialiased">
            <summary>
            Gets if antialiasing should be used
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.IPen2D.StrokeEndLineCap">
            <summary>
            Gets a value that describes a shape at the end of line
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.IDashSplittingContext">
            <summary>
            Defines interface to context of splitting line into dashes
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.IDashSplittingContext.HasDashes">
            <summary>
            When true, this instance has dashes 
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.IDashSplittingContext.StrokeDashArray">
            <summary>
            Optional array with lengths of dash pattern items
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.IDashSplittingContext.StrokeDashArrayIndex">
            <summary>
            Current index in StrokeDashArray
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.IDashSplittingContext.StrokeDashArrayItemPassedLength">
            <summary>
            Already passed length of current item in StrokeDashArray
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.IRenderContext2D">
            <summary>
            Defines the interface to a 2D RenderContext, allowing drawing, blitting and creation of pens and brushes on the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /></summary>
            <remarks>The <see cref="T:SciChart.Drawing.Common.IRenderContext2D" /> is a graphics context valid for the current render pass. in which an <see cref="T:SciChart.Drawing.Common.IRenderContext2D" /> is passed in. Use this to draw penned lines, fills, rectangles, ellipses and blit graphics to the screen.</remarks>
        </member>
        <member name="P:SciChart.Drawing.Common.IRenderContext2D.Layers">
            <summary>
            Gets a collection of <see cref="T:SciChart.Drawing.Common.RenderOperationLayers" />, which allow rendering operations to be posted to a layered queue for later
            execution in order (and correct Z-ordering). 
            </summary>
            <example>
                <code title="RenderOperationLayers Example" description="Demonstrates how to enqueue operations to the RenderOperationLayers collection and later flush to ensure rendering operations get processed in the correct Z-order" lang="C#">
            RenderOperationLayers layers = renderContext.Layers;
             
            // Enqueue some operations in the layers in any order
            layers[RenderLayer.AxisMajorGridlines].Enqueue(() =&gt; renderContext.DrawLine(/* .. */));
            layers[RenderLayer.AxisBands].Enqueue(() =&gt; renderContext.DrawRectangle(/* .. */));
            layers[RenderLayer.AxisMinorGridlines].Enqueue(() =&gt; renderContext.DrawLine(/* .. */));
             
            // Processes all layers by executing enqueued operations in order of adding, 
            // and in Z-order of layers
            layers.Flush();</code>
            </example>
        </member>
        <member name="P:SciChart.Drawing.Common.IRenderContext2D.ViewportSize">
            <summary>
            Gets the current size of the viewport.
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.SetPrimitivesCachingEnabled(System.Boolean)">
            <summary>
            enables/disables primitves chaching optimization ( Direct3D renderer only )
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.CreateBrush(System.Windows.Media.Color,System.Double,System.Nullable{System.Boolean})">
            <summary>
            Creates a <see cref="T:SciChart.Drawing.Common.IBrush2D" /> valid for the current render pass. Use this to draw rectangles, polygons and shaded areas 
            </summary>
            <param name="color">The color of the brush, supports transparency</param>
            <param name="opacity">The opacity of the brush</param>
            <param name="alphaBlend">If true, use alphablending when shading. If null, auto-detect</param>
            <returns>The <see cref="T:SciChart.Drawing.Common.IBrush2D" /> instance</returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.CreateBrush(System.Windows.Media.Brush,System.Double,SciChart.Drawing.Common.TextureMappingMode)">
            <summary>
            Creates a <see cref="T:SciChart.Drawing.Common.IBrush2D" /> from WPF Brush valid for the current render pass. Use this to draw rectangles, polygons and shaded areas 
            </summary>
            <param name="brush">The WPF Brush to use as a source, e.g. this can be a <seealso cref="T:System.Windows.Media.SolidColorBrush" />, or it can be a <seealso cref="T:System.Windows.Media.LinearGradientBrush" />. Note that solid colors support transparency and are faster than gradient brushes</param>
            <param name="opacity">The opacity of the brush</param>
            <param name="textureMappingMode">Defines a <see cref="T:SciChart.Drawing.Common.TextureMappingMode" />, e.g. brushes share a texture per viewport or a new texture per primitive drawn</param>
            <returns>The <see cref="T:SciChart.Drawing.Common.IBrush2D" /> instance</returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.CreatePen(System.Windows.Media.Color,System.Boolean,System.Single,System.Double,System.Double[],System.Windows.Media.PenLineCap)">
            <summary>
            Creates a <see cref="T:SciChart.Drawing.Common.IPen2D" /> valid for the current render pass. Use this to draw outlines, quads and lines
            </summary>
            <param name="color">The color of the pen, supports transparency</param>
            <param name="antiAliasing">If true, use antialiasing</param>
            <param name="strokeThickness">The strokethickness, default=1.0</param>
            <param name="opacity">The opecity of the pen</param>
            <param name="strokeDashArray"></param>
            <param name="strokeEndLineCap"></param>
            <returns>The <see cref="T:SciChart.Drawing.Common.IPen2D" /> instance</returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.CreateSprite(System.Windows.FrameworkElement)">
            <summary>
            Creates a Sprite from FrameworkElement by rendering to bitmap. This may be used in the <see cref="M:SciChart.Drawing.Common.IRenderContext2D.DrawSprite(SciChart.Drawing.Common.ISprite2D,System.Windows.Rect,System.Windows.Point)" /> method
            to draw to the screen repeatedly
            </summary>
            <param name="fe">The FrameworkElement to render</param>
            <returns>The sprite which may be drawn in SciChart</returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.CreateSprite(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Creates a Sprite from WriteableBitmap. This may be used in the <see cref="M:SciChart.Drawing.Common.IRenderContext2D.DrawSprite(SciChart.Drawing.Common.ISprite2D,System.Windows.Rect,System.Windows.Point)" /> method
            to draw to the screen repeatedly
            </summary>
            <param name="spriteContent">The WriteableBitmap containing the sprite content</param>
            <returns>The sprite which may be drawn in SciChart</returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.Clear">
            <summary>
            Clears the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.DrawSprite(SciChart.Drawing.Common.ISprite2D,System.Windows.Rect,System.Windows.Point)">
            <summary>
            Blits the source image onto the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
            <param name="srcSprite">The source sprite to render</param>
            <param name="srcRect">The source rectangle</param>
            <param name="destPoint">The destination point, which will be the top-left coordinate of the sprite after blitting</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.DrawSprites(SciChart.Drawing.Common.ISprite2D,System.Windows.Rect,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Batch draw of the source sprite onto the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
            <param name="sprite2D">The sprite to render</param>
            <param name="srcRect">The source rectangle</param>
            <param name="points">The points to draw sprites at</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.DrawSprites(SciChart.Drawing.Common.ISprite2D,System.Collections.Generic.IEnumerable{System.Windows.Rect})">
            <summary>
            Batch draw of the source sprite onto the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
            <param name="sprite2D">The sprite to render</param>
            <param name="dstRects">The destination rectangles to draw sprites at</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.FillRectangle(SciChart.Drawing.Common.IBrush2D,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Fills a rectangle on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> using the specified <see cref="T:SciChart.Drawing.Common.IBrush2D" /></summary>
            <param name="brush">The brush</param>
            <param name="pt2">The top-left point of the rectangle</param>
            <param name="pt1">The bottom-right point of the rectangle</param>
            <param name="gradientRotationAngle">The angle which the brush is rotated by, default is zero</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.FillRectangle(System.Int32,System.Windows.Point,System.Windows.Point)">
            <summary>
            Fills a rectangle on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> using the specified <see cref="T:SciChart.Drawing.Common.IBrush2D" /></summary>
            <param name="color">The brush</param>
            <param name="pt2">The top-left point of the rectangle</param>
            <param name="pt1">The bottom-right point of the rectangle</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.FillPolygon(SciChart.Drawing.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Fills a polygon on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> using the specifie <see cref="T:SciChart.Drawing.Common.IBrush2D" /></summary>
            <param name="brush">The brush</param>
            <param name="points">The list of points defining the closed polygon, where X,Y coordinates in clockwise direction</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.FillArea(SciChart.Drawing.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Tuple{System.Windows.Point,System.Windows.Point}},System.Boolean,System.Double)">
            <summary>
            Fills an area defined the the Points and Heights, e.g. as in a mountain chart, using the specifie <see cref="T:SciChart.Drawing.Common.IBrush2D" /></summary>
            <param name="brush">The brush</param>
            <param name="lines"></param>
            <param name="isVerticalChart">Value, indicates whether chart is vertical</param>
            <param name="gradientRotationAngle">The angle which the brush is rotated by</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.DrawQuad(SciChart.Drawing.Common.IPen2D,System.Windows.Point,System.Windows.Point)">
            <summary>
            Draws a Quad on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> using the specified <see cref="T:SciChart.Drawing.Common.IPen2D" /></summary>
            <param name="pen">The Pen</param>
            <param name="pt1">Left-top point in the quad</param>
            <param name="pt2">Bottom-right point in the quad</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.DrawEllipse(SciChart.Drawing.Common.IPen2D,SciChart.Drawing.Common.IBrush2D,System.Windows.Point,System.Double,System.Double)">
            <summary>
            Draws an Ellipse on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> using the specified outline <see cref="T:SciChart.Drawing.Common.IPen2D">Pen</see> and fill <see cref="T:SciChart.Drawing.Common.IBrush2D">Brush</see></summary>
            <param name="strokePen">The stroke pen</param>
            <param name="fillBrush">The fill brush</param>
            <param name="center">The center of the ellipse in pixels</param>
            <param name="width">The width of the ellipse in pixels</param>
            <param name="height">The height of the ellipse in pixels</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.DrawEllipses(SciChart.Drawing.Common.IPen2D,SciChart.Drawing.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Double,System.Double)">
            <summary>
            Draws 0..N Ellipses at the points passed in with the same width, height, pen and brush
            </summary>
            <param name="strokePen"></param>
            <param name="fillBrush"></param>
            <param name="centres">The points to draw ellipses at</param>
            <param name="width">The common width for all ellipses</param>
            <param name="height">The common height for all ellipses</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.DrawLine(SciChart.Drawing.Common.IPen2D,System.Windows.Point,System.Windows.Point)">
            <summary>
            Draws a single line on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> using the specified <see cref="T:SciChart.Drawing.Common.IPen2D" />. 
            Note for a faster implementation in some rasterizers, use DrawLines passing in an IEnumerable
            </summary>
            <param name="pen">The pen</param>
            <param name="pt1">The start of the line in pixels</param>
            <param name="pt2">The end of the line in pixels</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.DrawLines(SciChart.Drawing.Common.IPen2D,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Draws a multi-point line on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> using the specified <see cref="T:SciChart.Drawing.Common.IPen2D" /></summary>
            <param name="pen">The pen</param>
            <param name="points">The points </param>
            <returns>The last point in the polyline drawn</returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.DisposeResourceAfterDraw(System.IDisposable)">
            <summary>
            Call this method, passing in <see cref="T:System.IDisposable" /> instance to dispose after the render pass completes. 
            Called internally by SciChart to lazy-dispose of Direct2D and Direct3D brushes and textures
            </summary>
            <param name="disposable"></param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.DrawPixelsVertically(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Int32},System.Double,System.Boolean)">
            <summary>
            Draws vertical scan line for heatmap
            from bottom to top, from yStart to yEnd
            </summary>
            <param name="xLeft">Screen X coordinate where to draw pixels</param>
            <param name="xRight">Screen X coordinate where to draw pixels</param>
            <param name="yStartBottom">Screen Y coordinate of vertical scan line's bottom.
            Can be located outdide of visible area, in this case not all pixels in list are rendered</param>
            <param name="yEndTop">Screen Y coordinate of vertical scan line's top.
            Can be located outdide of visible area, in this case not all pixels in list are rendered</param>
            <param name="pixelColorsArgb">The list of pixel colors to draw</param>
            <param name="opacity">The Opacity of the line from 0.0 to 1.0</param>
            <param name="yAxisIsFlipped">if set to <c>true</c> then y axis is flipped.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.DrawText(System.Windows.Rect,System.Windows.Media.Color,System.Single,System.String,System.Windows.Media.FontFamily,System.Windows.FontWeight,System.Windows.FontStyle)">
            <summary>
            Draws text if it does not go outside 
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.BeginLine(SciChart.Drawing.Common.IPen2D,System.Double,System.Double)">
            <summary>
            Begins a Polyline segment, returning the <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" />. This is the fastest way to draw lines and simply a proxy to <see cref="M:SciChart.Drawing.Common.IRenderContext2D.DrawLines(SciChart.Drawing.Common.IPen2D,System.Collections.Generic.IEnumerable{System.Windows.Point})" /> method. 
            </summary>
            <param name="pen">The pen for the line segment</param>
            <param name="startX">The start X coordinate (pixel coord)</param>
            <param name="startY">The start Y coordinate (pixel coord)</param>
            <returns>The <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" /> to continue the line</returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.BeginPolygon(SciChart.Drawing.Common.IBrush2D,System.Double,System.Double,System.Double)">
            <summary>
            Begins a filled Polygon segment, returning the <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" />. This is the fastest way to draw polygon and simply a proxy to <see cref="M:SciChart.Drawing.Common.IRenderContext2D.FillArea(SciChart.Drawing.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Tuple{System.Windows.Point,System.Windows.Point}},System.Boolean,System.Double)" /> method. 
            </summary>
            <param name="brush">The brush for the polygon fill</param>
            <param name="startX">The start X coordinate (pixel coord)</param>
            <param name="startY">The start Y coordinate (pixel coord)</param>
            <param name="gradientRotationAngle">The angle which the <paramref name="brush"></paramref> is rotated by</param>
            <returns>The <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" /> to continue the polygon</returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.BeginSpriteBatch(SciChart.Drawing.Common.ISprite2D,System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Begins a Sprite Batch, returning the <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" />. This is the fastest way to draw sprites and simply a proxy to <see cref="M:SciChart.Drawing.Common.RenderContextBase.DrawSprites(SciChart.Drawing.Common.ISprite2D,System.Windows.Rect,System.Collections.Generic.IEnumerable{System.Windows.Point})" /> method. 
            </summary>
            <param name="sprite">The sprite for the Sprite Batch</param>
            <param name="centerX">The start X coordinate (pixel coord)</param>
            <param name="centerY">The start Y coordinate (pixel coord)</param>
            <param name="width">An optional width override for the sprite. Defaults to Sprite.Width</param>
            <param name="height">An optional height override for the sprite. Defaults to Sprite.Height</param>
            <returns>The <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" /> to continue the sprite batch</returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.CreateTexture(System.Int32,System.Int32,SciChart.Drawing.Common.TextureFormats)">
            <summary>
            Creates a Texture with the specified width, height and format. This texture may be modified, and drawn repeatedly using <see cref="!:DrawTexture(ITexture2D, Rect)" /></summary>
            <param name="width">The width of the texture in pixels</param>
            <param name="height">The height of the texture in pixels</param>
            <param name="textureFormat">The texture format.</param>
            <returns>A new Texture2D object, which must be disposed when no longer required</returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.DrawTexture(SciChart.Drawing.Common.ITexture2D,System.Windows.Rect,SciChart.Drawing.Common.TextureFiltering)">
            <summary>
            Draws the <see cref="T:SciChart.Drawing.Common.ITexture2D" /> to the specified viewport rect
            </summary>
            <param name="texture">The texture.</param>
            <param name="viewportRect">The viewport rect.</param>
            <param name="filtering">The sampling mode.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.DrawHeightTextureContours(SciChart.Drawing.Common.ITexture2D,SciChart.Drawing.Common.ITexture2D,System.Windows.Rect,System.Windows.Media.Color,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws contours for a height texture the texture.
            </summary>
            <param name="texture">The float texture.</param>
            <param name="viewportRect">The viewport rect.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.AsExtremeRenderContext">
            <summary>
            Gets <see cref="T:SciChart.Drawing.Common.IExtremeRenderContext2D" /> from this render context
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.IsCompatibleType``1(``0)">
            <summary>
            Determines whether the primitive type T is compatible with this <see cref="T:SciChart.Drawing.Common.IRenderContext2D" /> instance
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderContext2D.DrawPixelsVertically(System.Int32,System.Int32,System.Int32[],System.Collections.Generic.IList{System.Int32},System.Double,System.Boolean,System.Boolean)">
            <summary>
            Draws vertical scan line for heatmap
            from bottom to top, from yStart to yEnd
            </summary>
            <param name="xLeft">Screen X coordinate where to draw pixels</param>
            <param name="xRight">Screen X coordinate where to draw pixels</param>
            <param name="yCoordinates"> An array of yCoordinates on YAxis</param>
            <param name="pixelColorsArgb">The list of pixel colors to draw</param>
            <param name="opacity">The Opacity of the line from 0.0 to 1.0</param>
            <param name="isUniform">if set to <c>true</c> then X values are to each other and the same is for Y values.</param>
            <param name="yAxisIsFlipped">if set to <c>true</c> then y axis is flipped.</param>
        </member>
        <member name="T:SciChart.Drawing.Common.TextureMappingMode">
            <summary>
            Defines enumeration constants to describe how textures are mapped. 
            If textures are mapped <see cref="F:SciChart.Drawing.Common.TextureMappingMode.PerScreen" />, then a single
            large texture is shared for all elements that use this texture. Else, if <see cref="F:SciChart.Drawing.Common.TextureMappingMode.PerPrimitive" />
            then individual primitives have separate textures. 
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Common.TextureMappingMode.PerScreen">
            <summary>
            with this mode texture coordinates equal to screen coordinates
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Common.TextureMappingMode.PerPrimitive">
            <summary>
            with this mode entire texture is fit into single primitive
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.IRenderSurface">
            <summary>
            Common interface for a RenderSurface, <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /></summary>
        </member>
        <member name="E:SciChart.Drawing.Common.IRenderSurface.Draw">
            <summary>
            Raised each time the render surface is to be drawn. Handle this event to paint to the surface
            </summary>
        </member>
        <member name="E:SciChart.Drawing.Common.IRenderSurface.Rendered">
            <summary>
            Raised immediately after a render operation has completed
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.IRenderSurface.NeedsResizing">
            <summary>
            Returns True if the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> size has changed and the viewport needs resizing
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.IRenderSurface.IsSizeValidForDrawing">
            <summary>
            Returns true if the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> size is valid for drawing
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.IRenderSurface.Style">
            <summary>
            Gets or sets a <see cref="P:SciChart.Drawing.Common.IRenderSurface.Style" /> to apply to the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
        </member>
        <member name="P:SciChart.Drawing.Common.IRenderSurface.Services">
            <summary>
            Gets or sets the <see cref="T:SciChart.Core.Utility.IServiceContainer" /> instance
            </summary>
            <value>The services.</value>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderSurface.ClearSeries">
            <summary>
            Clears all <see cref="T:System.Windows.FrameworkElement" /> Visual Children on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderSurface.Clear">
            <summary>
            Clears the viewport
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderSurface.RecreateSurface">
            <summary>
            Recreates the elements required by the Viewport, called once at startup and when the surface is resized
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.IRenderSurface2D">
            <summary>
            Defines the interface to a RenderSurface, which is a viewport used to draw 2D graphics in a fast manner. 
            The renderer architecture is plugin based, meaning we have
            build multiple implementations of <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" />. 
            </summary>
            <seealso cref="T:SciChart.Drawing.Common.IRenderSurface2D" />
            <seealso cref="T:SciChart.Drawing.HighQualityRasterizer.HighQualityRenderSurface" />
            <seealso cref="T:SciChart.Drawing.HighSpeedRasterizer.HighSpeedRenderSurface" />
        </member>
        <member name="P:SciChart.Drawing.Common.IRenderSurface2D.ChildSeries">
            <summary>
            Gets the ChildSeries in this <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> instance. 
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderSurface2D.GetRenderContext">
            <summary>
            Creates an <see cref="T:SciChart.Drawing.Common.IRenderContext2D" /> instance to perform drawing operations. Note this is only valid for the current render pass
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderSurface2D.ContainsSeries(System.Windows.FrameworkElement)">
            <summary>
            Returns True if the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> contains the <see cref="T:System.Windows.FrameworkElement" /> instance
            </summary>
            <param name="renderableSeries">the RenderableSeries instance as <see cref="T:System.Windows.FrameworkElement" /></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderSurface2D.AddSeries(System.Windows.FrameworkElement)">
            <summary>
            Adds the <see cref="T:System.Windows.FrameworkElement" /> instance as a visual child to the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
            <param name="renderableSeries"></param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderSurface2D.AddSeries(System.Collections.Generic.IEnumerable{System.Windows.FrameworkElement})">
            <summary>
            Adds the <see cref="T:System.Windows.FrameworkElement" /> instances as visual children to the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
            <param name="renderableSeries"></param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderSurface2D.RemoveSeries(System.Windows.FrameworkElement)">
            <summary>
            Removes the <see cref="T:System.Windows.FrameworkElement" /> from the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
            <param name="renderableSeries"></param>
        </member>
        <member name="M:SciChart.Drawing.Common.IRenderTimerFactory.CreateRenderTimer(System.Windows.Threading.Dispatcher,System.Nullable{System.Double},System.Action)">
            <summary>
            Creates a <see cref="T:SciChart.Drawing.Common.IRenderScheduler" />, a class which schedules rendering. There are default implementations built in to SciChart including
            <see cref="T:SciChart.Drawing.Common.RenderTimer" /> which uses DispatcherTimer and <see cref="T:SciChart.Drawing.Common.ThreadedRenderScheduler" /> which uses System.Timers.Timer.
            </summary>
            <param name="dispatcher">The current application dispatcher</param>
            <param name="maxFrameRate">Maximum frame rate. If null, chooses the default value (60 FPS). Else, uses the provided value</param>
            <param name="onRenderTimeElapsed">Callback function for when the render timer elapses</param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Drawing.Common.DefaultRenderTimerFactory">
            <summary>
            Default implementation of <see cref="T:SciChart.Drawing.Common.IRenderTimerFactory" /></summary>
        </member>
        <member name="T:SciChart.Drawing.Common.ISprite2D">
            <summary>
            Defines the interface to a 2D Sprite, a small fixed-size bitmap which is rendered repeatedly to the viewport
            </summary>
            <seealso cref="T:SciChart.Drawing.Common.IRenderContext2D" />
            <seealso cref="T:SciChart.Drawing.Common.RenderContextBase" />
        </member>
        <member name="P:SciChart.Drawing.Common.ISprite2D.Width">
            <summary>
            Gets the width of the Spite in pixels
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.ISprite2D.Height">
            <summary>
            Gets the height of the Sprite in pixels
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.TextureFormats">
            <summary>
            Defines TextureFormats for <see cref="T:SciChart.Drawing.Common.ITexture2D" /> derived types
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Common.TextureFormats.Bgra8">
            <summary>
            Texture pixel format is Blue Green Red Alpha (8 bit per channel)
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.TextureFiltering">
            <summary>
            Defines the texture filtering mode. Texture filtering is the method used to determine the texture color
            for a texture mapped pixel, using the colors of nearby texels (pixels of the texture)
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Common.TextureFiltering.Point">
            <summary>
            Point filtering samples a texture without considering values from nearby texels. Final image looks sharp.
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Common.TextureFiltering.Linear">
            <summary>
            Linear filtering samples a texture by linear interpolation of values from nearby texels. Final image looks smoothed.
            Supported only by DirectX render context.
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.ITexture2D">
            <summary>
            Defines the interface to a 2D texture, used to draw images on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
        </member>
        <member name="P:SciChart.Drawing.Common.ITexture2D.Width">
            <summary>
            Gets the width of the texture
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.ITexture2D.Height">
            <summary>
            Gets the height of the texture
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.ITexture2D.TextureFormat">
            <summary>
            Gets the texture format for this texture
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.ITexture2D.SetData(System.Int32[])">
            <summary>
            Sets int[] pixel data on the Texture. Assumes <see cref="F:SciChart.Drawing.Common.TextureFormats.Bgra8" /></summary>
            <param name="colorData">The color data for pixels.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.ITexture2D.SetFloatData(System.Single[])">
            <summary>
            Sets int[] pixel data on the Texture. Assumes <see cref="F:SciChart.Drawing.Common.TextureFormats.Bgra8" /></summary>
            <param name="colorData">The color data for pixels.</param>
        </member>
        <member name="T:SciChart.Drawing.Common.IVerticesBuffer">
            <summary>
            Defines the interface to a GPU vertex buffer
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.IVerticesBuffer.LockColorVertices(SciChart.Charting2D.Interop.SCRTLineType,System.UInt32)">
            <summary>
            USED INTERNALLY: Locks GPU vertex buffer for direct memory access
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.IVerticesBuffer.UnlockColorVertices(SciChart.Charting2D.Interop.SCRTLineType)">
            <summary>
            USED INTERNALLY: Unlocks GPU vertex buffer before rendering
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.IVerticesBuffer.LockBubbleVertices(System.UInt32)">
            <summary>
            USED INTERNALLY: Locks GPU vertex buffer for direct memory access
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IVerticesBuffer.UnlockBubbleVertices">
            <summary>
            USED INTERNALLY: Unlocks GPU vertex buffer before rendering
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.IVerticesBuffer.LockSpritesVertices(System.UInt32)">
            <summary>
            USED INTERNALLY: Locks GPU vertex buffer for direct memory access
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Drawing.Common.IVerticesBuffer.UnlockSpritesVertices">
            <summary>
            USED INTERNALLY: Unlocks GPU vertex buffer before rendering
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.IVxRenderContext">
            <summary>
            Defines the interface to a Twister 2D RenderContext, allowing drawing, blitting and creation of pens and brushes on the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /></summary>
        </member>
        <member name="M:SciChart.Drawing.Common.IVxRenderContext.DrawLinesBatch(SciChart.Charting2D.Interop.XyColorVertex[],System.Int32,SciChart.Drawing.Common.IPen2D,System.Boolean,System.Boolean,System.Nullable{System.Boolean},SciChart.Charting2D.Interop.SCRTVertexTransform)">
            <summary>
            Draws lines from <see cref="T:SciChart.Charting2D.Interop.XyColorVertex" /> array as a single batched call.
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting2D.Interop.XyColorVertex" /> array containing data to draw.</param>
            <param name="count">The number of points to draw.</param>
            <param name="pen">The default line pen.</param>
            <param name="isStrips">If set to <c>false</c> draw a line in segments.</param>
            <param name="isDigital">If set to <c>true</c> draw a digital, stepped line.</param>
            <param name="isDrawNanAsGaps">If set to <c>true</c> double.NaN gaps are rendered as gaps, otherwise as closed lines. Null means regular line.</param>
            <param name="vertexTransform">The optional per-vertex transform to apply to each point during rendering. Null means identity matrix.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IVxRenderContext.DrawSpritesBatch(SciChart.Charting2D.Interop.XySpriteVertex[],System.Int32,SciChart.Drawing.Common.ISprite2D,SciChart.Drawing.Common.ISprite2D,SciChart.Charting2D.Interop.SCRTVertexTransform,System.Single)">
            <summary>
            Draws sprites defined by the <see cref="T:SciChart.Drawing.Common.ISprite2D" /> from an <see cref="T:SciChart.Charting2D.Interop.XySpriteVertex" /> array as a single batched call.
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting2D.Interop.XyColorVertex" /> array containing data to draw.</param>
            <param name="count">The number of points to draw.</param>
            <param name="sprite">The sprite to draw at each point</param>
            <param name="strokeSprite">The sprite to draw stroke at each point</param>
            <param name="vertexTransform">The optional per-vertex transform to apply to each point during rendering. Null means identity matrix.</param>
            <param name="centeredAmount"></param>
        </member>
        <member name="M:SciChart.Drawing.Common.IVxRenderContext.DrawBandsBatch(SciChart.Charting2D.Interop.XyyBandVertex[],System.Int32,SciChart.Drawing.Common.IPen2D,SciChart.Drawing.Common.IPen2D,SciChart.Drawing.Common.IBrush2D,SciChart.Drawing.Common.IBrush2D,System.Boolean,SciChart.Charting2D.Interop.SCRTVertexTransform,SciChart.Charting2D.Interop.SCRTPalette)">
            <summary>
            Draws two lines and a band polygon between the Y0 and Y1 points on each <see cref="T:SciChart.Charting2D.Interop.XyyBandVertex" />, as a single batched call.
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting2D.Interop.XyyBandVertex" /> array containing data to draw.</param>
            <param name="count">The number of points to draw.</param>
            <param name="penA">The pen to draw the Y0 line.</param>
            <param name="penB">The pen to draw the Y1 line.</param>
            <param name="brushP">The brush used to fill the band when Y0 &gt; Y1.</param>
            <param name="brushN">The brush used to fill the band when Y0 &lt; Y1.</param>
            <param name="isDigital">If set to <c>true</c> draw a digital line/band.</param>
            <param name="vertexTransform">The optional per-vertex transform to apply to each point during rendering. Null means identity matrix.</param>
            <param name="palette">The optional colors to apply to each point during rendering. Null means default colors.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IVxRenderContext.DrawMountainBatch(SciChart.Charting2D.Interop.XyyBandVertex[],System.Int32,SciChart.Drawing.Common.IPen2D,SciChart.Drawing.Common.IBrush2D,System.Boolean,SciChart.Charting2D.Interop.SCRTVertexTransform,SciChart.Charting2D.Interop.SCRTPalette)">
            <summary>
            Draws a mountain or area between Y0 and Y1 in the <see cref="T:SciChart.Charting2D.Interop.XyyBandVertex" /> array, as a single batched draw call.
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting2D.Interop.XyyBandVertex" /> array containing data to draw.</param>
            <param name="count">The number of points to draw.</param>
            <param name="pen">The pen to draw the Y0 line.</param>
            <param name="brush">The brush used to fill the area when Y0 &gt; Y1.</param>
            <param name="isDigital">If set to <c>true</c> draw a digital line/mountain.</param>
            <param name="vertexTransform">The optional per-vertex transform to apply to each point during rendering. Null means identity matrix.</param>
            <param name="palette">The optional colors to apply to each point during rendering. Null means default colors.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IVxRenderContext.DrawCandlesBatch(SciChart.Charting2D.Interop.XohlcCandleVertex[],System.Int32,System.Single,SciChart.Drawing.Common.IPen2D,SciChart.Drawing.Common.IPen2D,SciChart.Drawing.Common.IBrush2D,SciChart.Drawing.Common.IBrush2D,SciChart.Charting2D.Interop.SCRTVertexTransform)">
            <summary>
            Draws candlesticks from the <see cref="T:SciChart.Charting2D.Interop.XohlcCandleVertex" /> array, as a single batched draw call.
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting2D.Interop.XohlcCandleVertex" /> array containing data to draw.</param>
            <param name="count">The number of points to draw.</param>
            <param name="width">The width of each candle in pixels</param>
            <param name="penHigh">The pen to paint wicks if the candle is an UP candle</param>
            <param name="penLow">The pen to paint wicks if the candle is a DOWN candle</param>
            <param name="brushHigh">The brush to fill candles if the candle is UP</param>
            <param name="brushLow">The brush to fill candles if the candle is DOWN</param>
            <param name="vertexTransform">The optional per-vertex transform to apply to each point during rendering. Null means identity matrix.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IVxRenderContext.DrawOhlcBatch(SciChart.Charting2D.Interop.XohlcCandleVertex[],System.Int32,System.Single,SciChart.Drawing.Common.IPen2D,SciChart.Drawing.Common.IPen2D,SciChart.Charting2D.Interop.SCRTVertexTransform)">
            <summary>
            Draws OHLC bars from the <see cref="T:SciChart.Charting2D.Interop.XohlcCandleVertex" /> array, as a single batched draw call.
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting2D.Interop.XohlcCandleVertex" /> array containing data to draw.</param>
            <param name="count">The number of points to draw.</param>
            <param name="width">The width of each bar in pixels</param>
            <param name="penHigh">The pen to paint wicks if the bar is an UP bar</param>
            <param name="penLow">The pen to paint wicks if the bar is a DOWN bar</param>
            <param name="vertexTransform">The optional per-vertex transform to apply to each point during rendering. Null means identity matrix.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IVxRenderContext.DrawColumnsBatch(SciChart.Charting2D.Interop.XyColumnVertex[],System.Int32,SciChart.Drawing.Common.IPen2D,SciChart.Drawing.Common.IBrush2D,SciChart.Charting2D.Interop.SCRTVertexTransform)">
            <summary>
            Draws columns from the <see cref="T:SciChart.Charting2D.Interop.XyColumnVertex" /> array, as a single batched draw call.
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting2D.Interop.XyColumnVertex" /> array containing data to draw.</param>
            <param name="count">The number of points to draw.</param>
            <param name="pen">The pen to draw the stroke line.</param>
            <param name="brush">The brush used to fill the area.</param>
            <param name="vertexTransform">The optional per-vertex transform to apply to each point during rendering. Null means identity matrix.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IVxRenderContext.DrawRectsBatch(SciChart.Charting2D.Interop.XyRectVertex[],System.Int32,SciChart.Drawing.Common.ISprite2D,SciChart.Charting2D.Interop.SCRTVertexTransform,SciChart.Drawing.VisualXcceleratorRasterizer.VxSpriteAnchor)">
            <summary>
            Draws rectangles from the <see cref="T:SciChart.Charting2D.Interop.XyRectVertex" /> array, as a single batched draw call.
            </summary>
            <param name="points">The <see cref="T:SciChart.Charting2D.Interop.XyRectVertex" /> array containing data to draw.</param>
            <param name="count">The number of points to draw.</param>
            <param name="sprite">The sprite to draw at each point</param>
            <param name="vertexTransform">The optional per-vertex transform to apply to each point during rendering. Null means identity matrix.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.IVxRenderContext.SetClipRect(System.Windows.Rect)">
            <summary>
            Sets a viewport rectangle for all subsequent draw calls.
            </summary>
            <param name="clipRect">The viewport rectangle to draw.</param>
        </member>
        <member name="T:SciChart.Drawing.Common.RenderContextBase">
            <summary>
            Defines the base class for <see cref="T:SciChart.Drawing.Common.IRenderContext2D" /> implementors, allowing drawing, blitting and creation of pens and brushes on the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /></summary>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderContextBase.Layers">
            <summary>
            Gets a collection of <see cref="T:SciChart.Drawing.Common.RenderOperationLayer" /> layers, which allow rendering operations to be posted to a layered queue for later
            execution in order (and correct Z-ordering). 
            </summary>
            <seealso cref="T:SciChart.Drawing.Common.RenderLayer"></seealso>
            <seealso cref="T:SciChart.Drawing.Common.RenderOperationLayer"></seealso>
            <seealso cref="T:SciChart.Drawing.Common.RenderSurfaceBase"></seealso>
            <example>
                <code title="RenderOperationLayers Example" description="Demonstrates how to enqueue operations to the RenderOperationLayers collection and later flush to ensure rendering operations get processed in the correct Z-order" lang="C#">
            RenderOperationLayers layers = renderContext.Layers;
             
            // Enqueue some operations in the layers in any order
            layers[RenderLayer.AxisMajorGridlines].Enqueue(() =&gt; renderContext.DrawLine(/* .. */));
            layers[RenderLayer.AxisBands].Enqueue(() =&gt; renderContext.DrawRectangle(/* .. */));
            layers[RenderLayer.AxisMinorGridlines].Enqueue(() =&gt; renderContext.DrawLine(/* .. */));
             
            // Processes all layers by executing enqueued operations in order of adding, 
            // and in Z-order of layers
            layers.Flush();</code>
            </example>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderContextBase.ViewportSize">
            <summary>
            Gets the size of the current viewport for this render operation
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.SetPrimitivesCachingEnabled(System.Boolean)">
            <summary>
            enables/disables primitves chaching optimization ( Direct3D renderer only )
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.CreateBrush(System.Windows.Media.Color,System.Double,System.Nullable{System.Boolean})">
            <summary>
            Creates a <see cref="T:SciChart.Drawing.Common.IBrush2D" /> valid for the current render pass. Use this to draw rectangles, polygons and shaded areas
            </summary>
            <param name="color">The color of the brush, supports transparency</param>
            <param name="opacity">The opacity of the brush</param>
            <param name="alphaBlend">If true, use alphablending when shading. If null, auto-detect from the Color</param>
            <returns>
            The <see cref="T:SciChart.Drawing.Common.IBrush2D" /> instance
            </returns>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.CreateBrush(System.Windows.Media.Brush,System.Double,SciChart.Drawing.Common.TextureMappingMode)">
            <summary>
            Creates a <see cref="T:SciChart.Drawing.Common.IBrush2D" /> from WPF Brush valid for the current render pass. Use this to draw rectangles, polygons and shaded areas
            </summary>
            <param name="brush">The WPF Brush to use as a source, e.g. this can be a <seealso cref="T:System.Windows.Media.SolidColorBrush" />, or it can be a <seealso cref="T:System.Windows.Media.LinearGradientBrush" />. Note that solid colors support transparency and are faster than gradient brushes</param>
            <param name="opacity">The opacity of the brush</param>
            <param name="textureMappingMode"></param>
            <returns>
            The <see cref="T:SciChart.Drawing.Common.IBrush2D" /> instance
            </returns>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.CreatePen(System.Windows.Media.Color,System.Boolean,System.Single,System.Double,System.Double[],System.Windows.Media.PenLineCap)">
            <summary>
            Creates a <see cref="T:SciChart.Drawing.Common.IPen2D" /> valid for the current render pass. Use this to draw outlines, quads and lines
            </summary>
            <param name="color">The color of the pen, supports transparency</param>
            <param name="antiAliasing">If true, use antialiasing</param>
            <param name="strokeThickness">The strokethickness, default=1.0</param>
            <param name="opacity">The opecity of the pen</param>
            <param name="strokeDashArray"></param>
            <param name="strokeEndLineCap"></param>
            <returns>
            The <see cref="T:SciChart.Drawing.Common.IPen2D" /> instance
            </returns>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.CreateSprite(System.Windows.FrameworkElement)">
            <summary>
            Creates a Sprite from FrameworkElement by rendering to bitmap. This may be used in the <see cref="M:SciChart.Drawing.Common.RenderContextBase.DrawSprite(SciChart.Drawing.Common.ISprite2D,System.Windows.Rect,System.Windows.Point)" /> method
            to draw to the screen repeatedly
            </summary>
            <param name="fe">The FrameworkElement to render</param>
            <returns>The sprite which may be drawn in SciChart</returns>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.CreateSprite(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Creates a Sprite from WriteableBitmap. This may be used in the <see cref="M:SciChart.Drawing.Common.RenderContextBase.DrawSprite(SciChart.Drawing.Common.ISprite2D,System.Windows.Rect,System.Windows.Point)" /> method
            to draw to the screen repeatedly
            </summary>
            <param name="spriteContent">The WriteableBitmap containing the sprite content</param>
            <returns>The sprite which may be drawn in SciChart</returns>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.Clear">
            <summary>
            Clears the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.DrawSprite(SciChart.Drawing.Common.ISprite2D,System.Windows.Rect,System.Windows.Point)">
            <summary>
            Blits the source image onto the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
            <param name="srcSprite">The source sprite to render</param>
            <param name="srcRect">The source rectangle</param>
            <param name="destPoint">The destination point, which will be the top-left coordinate of the sprite after blitting</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.DrawSprites(SciChart.Drawing.Common.ISprite2D,System.Windows.Rect,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Batch draw of the source sprite onto the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
            <param name="sprite2D">The sprite to render</param>
            <param name="srcRect">The source rectangle</param>
            <param name="points">The points to draw sprites at</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.DrawSprites(SciChart.Drawing.Common.ISprite2D,System.Collections.Generic.IEnumerable{System.Windows.Rect})">
            <summary>
            Batch draw of the source sprite onto the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
            <param name="sprite2D">The sprite to render</param>
            <param name="dstRects">The destination rectangles to draw sprites at</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.FillRectangle(SciChart.Drawing.Common.IBrush2D,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Fills a rectangle on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> using the specified <see cref="T:SciChart.Drawing.Common.IBrush2D" /></summary>
            <param name="brush">The brush</param>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="gradientRotationAngle">The angle which the brush is rotated by</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.FillRectangle(System.Int32,System.Windows.Point,System.Windows.Point)">
            <summary>
            Fills a rectangle on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> using the specified <see cref="T:SciChart.Drawing.Common.IBrush2D" /></summary>
            <param name="color">The brush</param>
            <param name="pt1"></param>
            <param name="pt2"></param>
            <param name="gradientRotationAngle">The angle which the brush is rotated by</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.FillArea(SciChart.Drawing.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Tuple{System.Windows.Point,System.Windows.Point}},System.Boolean,System.Double)">
            <summary>
            Fills an area, limited by two line segments, e.g. as in a stacked mountain chart, using the specified <see cref="T:SciChart.Drawing.Common.IBrush2D" /></summary>
            <param name="brush">The brush</param>
            <param name="lines">The list of lines representing polygon segments</param>
            <param name="isVerticalChart">Value, indicates whether chart is vertical</param>
            <param name="gradientRotationAngle">The angle which the brush is rotated by</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.DrawEllipse(SciChart.Drawing.Common.IPen2D,SciChart.Drawing.Common.IBrush2D,System.Windows.Point,System.Double,System.Double)">
            <summary>
            Draws an Ellipse on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> using the specified outline <see cref="T:SciChart.Drawing.Common.IPen2D">Pen</see> and fill <see cref="T:SciChart.Drawing.Common.IBrush2D">Brush</see></summary>
            <param name="strokePen">The stroke pen</param>
            <param name="fillBrush">The fill brush</param>
            <param name="center">The center of the ellipse in pixels</param>
            <param name="width">The width of the ellipse in pixels</param>
            <param name="height">The height of the ellipse in pixels</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.DrawEllipses(SciChart.Drawing.Common.IPen2D,SciChart.Drawing.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Windows.Point},System.Double,System.Double)">
            <summary>
            Draws 0..N Ellipses at the points passed in with the same width, height, pen and brush
            </summary>
            <param name="strokePen"></param>
            <param name="fillBrush"></param>
            <param name="centres">The points to draw ellipses at</param>
            <param name="width">The common width for all ellipses</param>
            <param name="height">The common height for all ellipses</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.DisposeResourceAfterDraw(System.IDisposable)">
            <summary>
            Call this method, passing in <see cref="T:System.IDisposable" /> instance to dispose after the render pass completes.
            Called internally by SciChart to lazy-dispose of Direct2D and Direct3D brushes and textures
            </summary>
            <param name="disposable"></param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.DrawPixelsVertically(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList{System.Int32},System.Double,System.Boolean)">
            <summary>
            Draws vertical scan line for heatmap
            from bottom to top, from yStart to yEnd
            </summary>
            <param name="xLeft">Screen X coordinate where to draw pixels</param>
            <param name="xRight">Screen X coordinate where to draw pixels</param>
            <param name="yStartBottom">Screen Y coordinate of vertical scan line's bottom.
            Can be located outdide of visible area, in this case not all pixels in list are rendered</param>
            <param name="yEndTop">Screen Y coordinate of vertical scan line's top.
            Can be located outdide of visible area, in this case not all pixels in list are rendered</param>
            <param name="pixelColorsArgb">The colors to apply to the vertical scanline</param>
            <param name="opacity">The opacity of the vertical scaline, from 0.0 to 1.0</param>
            <param name="yAxisIsFlipped">if set to <c>true</c> then y axis is flipped.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.DrawPixelsVertically(System.Int32,System.Int32,System.Int32[],System.Collections.Generic.IList{System.Int32},System.Double,System.Boolean,System.Boolean)">
            <summary>
            Draws vertical scan line for heatmap
            from bottom to top, from yStart to yEnd
            </summary>
            <param name="xLeft">Screen X coordinate where to draw pixels</param>
            <param name="xRight">Screen X coordinate where to draw pixels</param>
            <param name="yCoordinates"> An array of yCoordinates on YAxis</param>
            <param name="pixelColorsArgb">The list of pixel colors to draw</param>
            <param name="opacity">The Opacity of the line from 0.0 to 1.0</param>
            <param name="isUniform">if set to <c>true</c> then X values are to each other and the same is for Y values.</param>
            <param name="yAxisIsFlipped">if set to <c>true</c> then y axis is flipped.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.DrawQuad(SciChart.Drawing.Common.IPen2D,System.Windows.Point,System.Windows.Point)">
            <summary>
            Draws a Quad on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> using the specified <see cref="T:SciChart.Drawing.Common.IPen2D" /></summary>
            <param name="pen">The Pen</param>
            <param name="pt1"></param>
            <param name="pt2"></param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.DrawLine(SciChart.Drawing.Common.IPen2D,System.Windows.Point,System.Windows.Point)">
            <summary>
            Draws a single line on the 
            <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> using the specified 
            <see cref="T:SciChart.Drawing.Common.IPen2D" />.
            Note for a faster implementation in some rasterizers, use DrawLines
            </summary>
            <param name="pen">The pen</param>
            <param name="pt1">The start of the line in pixels</param>
            <param name="pt2">The end of the line in pixels</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.DrawLines(SciChart.Drawing.Common.IPen2D,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Draws a multi-point line on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> using the specified <see cref="T:SciChart.Drawing.Common.IPen2D" /></summary>
            <param name="pen">The pen</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.FillPolygon(SciChart.Drawing.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Fills a polygon on the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> using the specifie <see cref="T:SciChart.Drawing.Common.IBrush2D" /></summary>
            <param name="brush">The brush</param>
            <param name="points">The list of points defining the closed polygon, where X,Y coordinates in clockwise direction</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.DrawText(System.Windows.Rect,System.Windows.Media.Color,System.Single,System.String,System.Windows.Media.FontFamily,System.Windows.FontWeight,System.Windows.FontStyle)">
            <summary>
            Draws text if it does not go outside
            </summary>
            <param name="dstBoundingRect"></param>
            <param name="foreColor"></param>
            <param name="fontSize"></param>
            <param name="text"></param>
            <param name="fontFamily"></param>
            <param name="fontWeight"></param>
            <param name="fontStyle"></param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.BeginLine(SciChart.Drawing.Common.IPen2D,System.Double,System.Double)">
            <summary>
            Begins a Polyline segment, returning the <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" />. This is the fastest way to draw lines and simply a proxy to <see cref="M:SciChart.Drawing.Common.RenderContextBase.DrawLines(SciChart.Drawing.Common.IPen2D,System.Collections.Generic.IEnumerable{System.Windows.Point})" /> method.
            </summary>
            <param name="pen">The pen for the line segment</param>
            <param name="startX">The start X coordinate (pixel coord)</param>
            <param name="startY">The start Y coordinate (pixel coord)</param>
            <returns>
            The <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" /> to continue the line
            </returns>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.BeginPolygon(SciChart.Drawing.Common.IBrush2D,System.Double,System.Double,System.Double)">
            <summary>
            Begins a filled Polygon segment, returning the <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" />. This is the fastest way to draw polygon and simply a proxy to <see cref="M:SciChart.Drawing.Common.RenderContextBase.FillArea(SciChart.Drawing.Common.IBrush2D,System.Collections.Generic.IEnumerable{System.Tuple{System.Windows.Point,System.Windows.Point}},System.Boolean,System.Double)" /> method.
            </summary>
            <param name="brush">The brush for the polygon fill</param>
            <param name="startX">The start X coordinate (pixel coord)</param>
            <param name="startY">The start Y coordinate (pixel coord)</param>
            <param name="gradientRotationAngle">The angle which the <param name="brush"></param> is rotated by</param>
            <returns>
            The <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" /> to continue the polygon
            </returns>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.BeginSpriteBatch(SciChart.Drawing.Common.ISprite2D,System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Begins a Sprite Batch, returning the <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" />. This is the fastest way to draw sprites and simply a proxy to <see cref="M:SciChart.Drawing.Common.RenderContextBase.DrawSprites(SciChart.Drawing.Common.ISprite2D,System.Windows.Rect,System.Collections.Generic.IEnumerable{System.Windows.Point})" /> method. 
            </summary>
            <param name="sprite">The sprite for the Sprite Batch</param>
            <param name="centerX">The start X coordinate (pixel coord)</param>
            <param name="centerY">The start Y coordinate (pixel coord)</param>
            <param name="width">An optional width override for the sprite. Defaults to Sprite.Width</param>
            <param name="height">An optional height override for the sprite. Defaults to Sprite.Height</param>
            <returns>The <see cref="T:SciChart.Drawing.Common.IPathDrawingContext" /> to continue the sprite batch</returns>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.ClipZeroLineForArea(System.Double,System.Boolean)">
            <summary>
            Used internally: Clips the zero line (e.g. in mountain fills) to the viewport
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.ClipArea(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Used internally to clip a polygon or line-segment to the viewport
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.IsInBounds(System.Windows.Point)">
            <summary>
            Returns true if the point is inside the viewport
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderContextBase.ClipArea(System.Collections.Generic.IEnumerable{System.Tuple{System.Windows.Point,System.Windows.Point}})">
            <summary>
            Used internally to clip the area of a StackedMountainSeries to the viewport
            </summary>
            <param name="lines">Collection of lines, which represent bounds of a polygon segment</param>
        </member>
        <member name="T:SciChart.Drawing.Common.RenderedEventArgs">
            <summary>
            Event args used when the <see cref="E:SciChart.Drawing.Common.IRenderSurface.Rendered" /> event is raised
            </summary>
            <seealso cref="T:SciChart.Drawing.Common.IRenderSurface2D" />
            <seealso cref="T:SciChart.Drawing.Common.RenderSurfaceBase" />
            <seealso cref="T:SciChart.Drawing.HighQualityRasterizer.HighQualityRenderSurface" />
            <seealso cref="T:SciChart.Drawing.HighSpeedRasterizer.HighSpeedRenderSurface" />
        </member>
        <member name="M:SciChart.Drawing.Common.RenderedEventArgs.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Drawing.Common.RenderedEventArgs" /> class.
            </summary>
            <param name="duration">The duration of the last render operation in milliseconds</param>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderedEventArgs.Duration">
            <summary>
            Gets the duration of the last render operation in milliseconds
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.RenderOperationLayer">
            <summary>
            Stores a queue of <see cref="T:System.Action" /> operations to perform, intended to be used to queue rendering operations and re-arrange Z-order
            </summary>
            <seealso cref="T:SciChart.Drawing.Common.RenderLayer" />
            <seealso cref="T:SciChart.Drawing.Common.RenderOperationLayer" />
            <seealso cref="T:SciChart.Drawing.Common.RenderSurfaceBase" />
            <example>
                <code title="RenderOperationLayers Example" description="Demonstrates how to enqueue operations to the RenderOperationLayers collection and later flush to ensure rendering operations get processed in the correct Z-order" lang="C#">
            RenderOperationLayers layers = renderContext.Layers;
             
            // Enqueue some operations in the layers in any order
            layers[RenderLayer.AxisMajorGridlines].Enqueue(() =&gt; renderContext.DrawLine(/* .. */));
            layers[RenderLayer.AxisBands].Enqueue(() =&gt; renderContext.DrawRectangle(/* .. */));
            layers[RenderLayer.AxisMinorGridlines].Enqueue(() =&gt; renderContext.DrawLine(/* .. */));
             
            // Processes all layers by executing enqueued operations in order of adding, 
            // and in Z-order of layers
            layers.Flush();</code>
            </example>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderOperationLayer.Enqueue(System.Action)">
            <summary>
            Enqueues an operation to the layer
            </summary>
            <param name="operation">The operation to queue</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderOperationLayer.Flush">
            <summary>
            Flushes, the layer, which processes all operations and clears the queue
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.RenderLayer">
            <summary>
            Enumeration Constants to define the layers in <see cref="T:SciChart.Drawing.Common.RenderOperationLayers" /></summary>
        </member>
        <member name="F:SciChart.Drawing.Common.RenderLayer.AxisBands">
            <summary>
            The Axis Bands render layer, Z-order = 0
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Common.RenderLayer.AxisMinorGridlines">
            <summary>
            The Axis Minor Gridlines render layer, Z-order = 1
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Common.RenderLayer.AxisMajorGridlines">
            <summary>
            The Axis Major Gridlines render layer, Z-order = 2
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Common.RenderLayer.RenderableSeries">
            <summary>
            The RenderableSeries render layer, Z-order = 3
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.RenderOperationLayers">
            <summary>
            A collection of <see cref="T:SciChart.Drawing.Common.RenderOperationLayer" /> layers, which allow rendering operations to be posted to a layered queue for later
            execution in order (and correct Z-ordering). 
            </summary>
            <seealso cref="T:SciChart.Drawing.Common.RenderLayer"></seealso>
            <seealso cref="T:SciChart.Drawing.Common.RenderOperationLayer"></seealso>
            <seealso cref="T:SciChart.Drawing.Common.RenderSurfaceBase"></seealso>
            <example>
                <code title="RenderOperationLayers Example" description="Demonstrates how to enqueue operations to the RenderOperationLayers collection and later flush to ensure rendering operations get processed in the correct Z-order" lang="C#">
            RenderOperationLayers layers = renderContext.Layers;
             
            // Enqueue some operations in the layers in any order
            layers[RenderLayer.AxisMajorGridlines].Enqueue(() =&gt; renderContext.DrawLine(/* .. */));
            layers[RenderLayer.AxisBands].Enqueue(() =&gt; renderContext.DrawRectangle(/* .. */));
            layers[RenderLayer.AxisMinorGridlines].Enqueue(() =&gt; renderContext.DrawLine(/* .. */));
             
            // Processes all layers by executing enqueued operations in order of adding, 
            // and in Z-order of layers
            layers.Flush();</code>
            </example>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderOperationLayers.Item(SciChart.Drawing.Common.RenderLayer)">
            <summary>
            Gets the <see cref="T:SciChart.Drawing.Common.RenderOperationLayer" /> with the specified <see cref="T:SciChart.Drawing.Common.RenderLayer" />.
            </summary>
            <value>
            The <see cref="T:SciChart.Drawing.Common.RenderOperationLayer" />.
            </value>
            <param name="layer">The layer to get.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderOperationLayers.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderOperationLayers.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderOperationLayers.Flush">
            <summary>
            Flushes the <see cref="T:SciChart.Drawing.Common.RenderOperationLayer" /> collection, processing and executing all render operations according to the
            Z-order defined by the <see cref="T:SciChart.Drawing.Common.RenderLayer" /> enumeration
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.RenderSurfaceBase">
            <summary>
            An abstract base class for the RenderSurface, which is a viewport used within the a SciChartSurface to 
            render RenderableSeries types in a fast manner. The renderer architecture is plugin based, meaning we have
            build multiple implementations of <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" />. 
            </summary>
            <seealso cref="T:SciChart.Drawing.Common.IRenderSurface2D" />
            <seealso cref="T:SciChart.Drawing.HighQualityRasterizer.HighQualityRenderSurface" />
            <seealso cref="T:SciChart.Drawing.HighSpeedRasterizer.HighSpeedRenderSurface" />
        </member>
        <member name="F:SciChart.Drawing.Common.RenderSurfaceBase.MaxFrameRateProperty">
            <summary>
            Defines the MaxFrameRate DependencyProperty 
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Common.RenderSurfaceBase.UseResizeThrottleProperty">
            <summary>
            Defines the UseResizeThrottle DependencyProperty 
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Common.RenderSurfaceBase.ResizeThrottleMsProperty">
            <summary>
            Defines the ResizeThrottleMs DependencyProperty 
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Common.RenderSurfaceBase.ShowLicensingWarningsProperty">
            <summary>
            Defines the ShowLicensingWarnings DependencyProperty
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Common.RenderSurfaceBase.IsPolarChartProperty">
            <summary>
            Defines the IsPolarChart DependencyProperty 
            </summary>
        </member>
        <member name="E:SciChart.Drawing.Common.RenderSurfaceBase.Draw">
            <summary>
            Raised each time the render surface is to be drawn. Handle this event to paint to the surface
            </summary>
        </member>
        <member name="E:SciChart.Drawing.Common.RenderSurfaceBase.Rendered">
            <summary>
            Raised immediately after a render operation has completed
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Common.RenderSurfaceBase.RectIdentifier">
            <summary>
            A GUID to identify the hit-test rect on this RenderSurface
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Common.RenderSurfaceBase.RenderWriteableBitmap">
            <summary>
            The WriteableBitmap instance used by this RenderSurface
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderSurfaceBase.IsDisposed">
            <summary>
            Gets whether an instance of the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> class is disposed or not.
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> class.
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderSurfaceBase.FontCache">
            <summary>
            Returns the FontCache (for drawing font characters) of the current RenderSurface 
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderSurfaceBase.Services">
            <summary>
            Gets or sets the <see cref="T:SciChart.Core.Utility.IServiceContainer" /> instance
            </summary>
            <value>The services.</value>
            <remarks></remarks>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderSurfaceBase.UseThreadedRenderTimer">
            <summary>
            Experimental. Switches the RenderTimer using CompositionTarget.Rendering for a ThreadedRenderScheduler which uses background thread to initiate drawing at high priority
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderSurfaceBase.RenderTimerFactory">
            <summary>
            For fine grained control over render scheduling, create a class which implements IRenderTimerFactory.
            Default value is DefaultRenderTimerFactory
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderSurfaceBase.IsPolarChart">
            <summary>
            Gets whether the SciChartSurface is a polar chart or not
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderSurfaceBase.ShowLicensingWarnings">
            <summary>
            When True, Licensing warnings such as missing Runtime Keys, or invalid license tokens, are displayed on the SciChart UI. Set this property to false to hide such warnings.
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderSurfaceBase.Grid">
            <summary>
            Gets the root element <see cref="P:SciChart.Drawing.Common.RenderSurfaceBase.Grid" /> which hosts components in the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /></summary>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderSurfaceBase.SeriesPanel">
            <summary>
            Gets the SeriesPanel <see cref="P:SciChart.Drawing.Common.RenderSurfaceBase.Grid" /> which hosts RenderableSeries, allowing them to participate in binding and visual tree operations
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderSurfaceBase.MaxFrameRate">
            <summary>
            Gets or sets the Maximum Frame Rate of this RenderSurface. By default this is bound to the parent SciChartSurface.MaxFrameRate 
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderSurfaceBase.ResizeThrottleMs">
            <summary>
            Gets or sets a timeout for resizing, e.g. 100ms means that the RenderSurface will batch up all Resize events received within a 100ms window. This reduces the CPU usage on resize. Also see <see cref="P:SciChart.Drawing.Common.RenderSurfaceBase.UseResizeThrottle" /> dependency property, which must be true
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderSurfaceBase.UseResizeThrottle">
            <summary>
            If true, uses the <see cref="P:SciChart.Drawing.Common.RenderSurfaceBase.ResizeThrottleMs" /> value to batch up Resize Events received within a certain time window, reducing the CPU load on resize
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderSurfaceBase.NeedsResizing">
            <summary>
            Returns True if the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> size has changed and the viewport needs resizing
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderSurfaceBase.IsSizeValidForDrawing">
            <summary>
            Returns true if the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> size is valid for drawing
            </summary>
        </member>
        <member name="P:SciChart.Drawing.Common.RenderSurfaceBase.ChildSeries">
            <summary>
            Gets the child RenderableSeries in this <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /> instance
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.InvalidateElement">
            <summary>
            Invalidates the RenderSurface, causing a repaint to occur
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.Clear">
            <summary>
            Clears the viewport
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.ContainsSeries(System.Windows.FrameworkElement)">
            <summary>
            Returns True if the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> contains the <see cref="T:System.Windows.FrameworkElement" /> instance
            </summary>
            <param name="renderableSeries">the <see cref="T:System.Windows.FrameworkElement" /> instance</param>
            <returns>
                <c>true</c> if the specified renderable series contains series; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.AddSeries(System.Collections.Generic.IEnumerable{System.Windows.FrameworkElement})">
            <summary>
            Adds the <see cref="T:System.Windows.FrameworkElement" /> instance to the <see cref="T:SciChart.Drawing.Common.IRenderSurface2D" /></summary>
            <param name="renderableSeries"></param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.AddSeries(System.Windows.FrameworkElement)">
            <summary>
            Adds the <see cref="T:System.Windows.FrameworkElement" /> instance to the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /></summary>
            <param name="renderableSeries">The renderable series.</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.RemoveSeries(System.Windows.FrameworkElement)">
            <summary>
            Removes the <see cref="T:System.Windows.FrameworkElement" /> from the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /></summary>
            <param name="renderableSeries">The renderable series.</param>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.ClearSeries">
            <summary>
            Clears all <see cref="T:System.Windows.FrameworkElement" /> on the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /></summary>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.RecreateSurface">
            <summary>
            Recreates the elements required by the Viewport, called once at startup and when the surface is resized
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.PublishResizedMessage(System.Int32,System.Int32)">
            <summary>
            Publishes <see cref="T:SciChart.Core.Messaging.RenderSurfaceResizedMessage" /> with actual viewport size
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.GetRenderContext">
            <summary>
            When overridden in a derived class, returns a RenderContext valid for the current render pass
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.DisposeUnmanagedResources">
            <summary>
            Derived classes may override this method to be notified when to dispose of unmanaged resources. Called when the
            <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> is disposed
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.OnRenderTimeElapsed">
            <summary>
            Called when the <see cref="E:System.Windows.Media.CompositionTarget.Rendering" /> event is raised
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.OnDraw">
            <summary>
            Raises the <see cref="E:SciChart.Drawing.Common.IRenderSurface.Draw">Draw</see> event which precedes the render operation
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.OnRendered(System.Double)">
            <summary>
            Raises the Rendered event with the specified duration
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.OnRenderSurfaceBaseLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> is loaded into the visual tree 
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.OnRenderSurfaceBaseUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> is Unloaded from the visual tree
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.TranslatePoint(System.Windows.Point,SciChart.Core.Framework.IHitTestable)">
            <summary>
            Translates the point relative to the other <see cref="T:SciChart.Core.Framework.IHitTestable" /> element
            </summary>
            <param name="point">The input point relative to this <see cref="T:SciChart.Core.Framework.IHitTestable" /></param>
            <param name="relativeTo">The other <see cref="T:SciChart.Core.Framework.IHitTestable" /> to use when transforming the point</param>
            <returns>
            The transformed Point
            </returns>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.IsPointWithinBounds(System.Windows.Point)">
            <summary>
            Returns true if the Point is within the bounds of the current <see cref="T:SciChart.Core.Framework.IHitTestable" /> element
            </summary>
            <param name="point">The point to test</param>
            <returns>
            true if the Point is within the bounds
            </returns>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderSurfaceBase.GetBoundsRelativeTo(SciChart.Core.Framework.IHitTestable)">
            <summary>
            Gets the bounds of the current <see cref="T:SciChart.Core.Framework.IHitTestable" /> element relative to another <see cref="T:SciChart.Core.Framework.IHitTestable" /> element
            </summary>
            <param name="relativeTo"></param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Drawing.Common.RenderTimer">
            <summary>
                <para>A timer which uses either <see cref="E:System.Windows.Media.CompositionTarget.Rendering" /> event (in case of maxFrameRate supplied as null to Constructor) or DispatcherTimer. </para>
                <para>Used by <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> derived types to trigger drawing</para>
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderTimer.#ctor(System.Nullable{System.Double},SciChart.Core.Framework.IDispatcherFacade,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Drawing.Common.RenderTimer" /> class.
            </summary>
            <param name="maxFrameRate">The maximum frame rate. When null, uses <see cref="E:System.Windows.Media.CompositionTarget.Rendering" /> event. Else, uses a dispatcher timer</param>
            <param name="dispatcher">The dispatcher.</param>
            <param name="renderOperation">The operation to invoke on timer tick.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.RenderTimer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Common.ThreadedRenderScheduler">
            <summary>
                <para>A timer which uses <see cref="T:System.Timers.Timer" /> to signal when rendering should occur. This can be used to solve problems with WinForms / WPF message loops and priority in certain high performance scenarios</para>
                <para>Used by <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> derived types to trigger drawing</para>
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Common.ThreadedRenderScheduler.#ctor(System.Nullable{System.Double},SciChart.Core.Framework.IDispatcherFacade,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Drawing.Common.RenderTimer" /> class.
            </summary>
            <param name="maxFrameRate">The maximum frame rate. When null, uses <see cref="E:System.Windows.Media.CompositionTarget.Rendering" /> event. Else, uses a dispatcher timer</param>
            <param name="dispatcher">The dispatcher.</param>
            <param name="renderOperation">The operation to invoke on timer tick.</param>
        </member>
        <member name="M:SciChart.Drawing.Common.ThreadedRenderScheduler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Extensions.FrameworkElementExtensions">
            <summary>
            Extension methods for FrameworkElements
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Extensions.FrameworkElementExtensions.Databind(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.Object,System.String,System.Windows.Data.BindingMode,System.Windows.Data.IValueConverter)">
            <summary>
            Databinds the source property to the destination property
            </summary>
            <param name="dest">The destination object.</param>
            <param name="destProperty">The destination property.</param>
            <param name="source">The source object.</param>
            <param name="sourcePath">The source path.</param>
            <param name="mode">The Binding mode.</param>
        </member>
        <member name="M:SciChart.Drawing.Extensions.FrameworkElementExtensions.RenderToBitmap(System.Windows.FrameworkElement)">
            <summary>
            Renders a FrameworkElement to bitmap
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Drawing.Extensions.FrameworkElementExtensions.RenderToBitmap(System.Windows.FrameworkElement,System.Int32,System.Int32)">
            <summary>
            Renders a FrameworkElement to bitmap at the requested width, height
            </summary>
            <param name="element">The element.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Drawing.HighQualityRasterizer.HighQualityRenderSurface">
            <summary>
            Provides a <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> implementation that uses a High-Quality software rasterizer, capable of rendering with sub-pixel accuracy. 
            The downside is, the <see cref="T:SciChart.Drawing.HighQualityRasterizer.HighQualityRenderSurface" /> uses a more accurate floating-point math rendering engine which is slower than the <see cref="T:SciChart.Drawing.HighSpeedRasterizer.HighSpeedRenderSurface" /> counterpart
            </summary>
            <seealso cref="T:SciChart.Drawing.HighSpeedRasterizer.HighSpeedRenderSurface" />
            <seealso cref="T:SciChart.Drawing.Common.RenderSurfaceBase" />
            <seealso cref="T:SciChart.Drawing.Common.IRenderContext2D" />
        </member>
        <member name="F:SciChart.Drawing.HighQualityRasterizer.HighQualityRenderSurface._emptyStrideRow">
            <summary>
            An empty row, used to fast clear bitmaps
            </summary>
        </member>
        <member name="M:SciChart.Drawing.HighQualityRasterizer.HighQualityRenderSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Drawing.HighQualityRasterizer.HighQualityRenderSurface" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Drawing.HighQualityRasterizer.HighQualityRenderSurface.RecreateSurface">
            <summary>
            Recreates the WriteableBitmap used by the Viewport
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:SciChart.Drawing.HighQualityRasterizer.HighQualityRenderSurface.GetRenderContext">
            <summary>
            When overridden in a derived class, returns a RenderContext valid for the current render pass
            </summary>
            <returns></returns>
        </member>
        <member name="T:SciChart.Drawing.HighSpeedRasterizer.HighSpeedRenderSurface">
            <summary>
            Provides a <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> implementation that uses a High-Speed software rasterizer, capable of outputting many millions of points (line-series) 
            at interactive framerates. The downside is, the <see cref="T:SciChart.Drawing.HighSpeedRasterizer.HighSpeedRenderSurface" /> uses integer fixed-point math which results in jagged lines. 
            </summary>
            <seealso cref="T:SciChart.Drawing.HighQualityRasterizer.HighQualityRenderSurface" />
            <seealso cref="T:SciChart.Drawing.Common.RenderSurfaceBase" />
            <seealso cref="T:SciChart.Drawing.Common.IRenderContext2D" />
        </member>
        <member name="M:SciChart.Drawing.HighSpeedRasterizer.HighSpeedRenderSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Drawing.HighSpeedRasterizer.HighSpeedRenderSurface" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Drawing.HighSpeedRasterizer.HighSpeedRenderSurface.GetRenderContext">
            <summary>
            When overridden in a derived class, returns a RenderContext valid for the current render pass
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SciChart.Drawing.Tessellator.Geom.EdgeEval(SciChart.Drawing.Tessellator.MeshUtils.Vertex,SciChart.Drawing.Tessellator.MeshUtils.Vertex,SciChart.Drawing.Tessellator.MeshUtils.Vertex)" -->
        <member name="T:SciChart.Drawing.TextureCache">
            <summary>
            The TextureCache is used by the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> to cache frequently used textures, such as Sprites or Gradient Brushes. 
            The maximum memory size is set by <see cref="F:SciChart.Drawing.TextureCache.MaxMemorySize" /> (default 32MBytes), and maximum number of items held is set by <see cref="F:SciChart.Drawing.TextureCache.MaxItemsCount" /> (default 2048).
            </summary>
        </member>
        <member name="F:SciChart.Drawing.TextureCache.MaxMemorySize">
            <summary>
            The maximum memory size that the TextureCache can hold
            </summary>
        </member>
        <member name="F:SciChart.Drawing.TextureCache.MaxItemsCount">
            <summary>
            The maximum items count that the TextureCache can hold
            </summary>
        </member>
        <member name="M:SciChart.Drawing.TextureCache.AddTexture(System.Windows.Size,System.Windows.Media.Brush,System.Byte[])">
            <summary>
            Adds the texture to the Texturecache
            </summary>
            <param name="size">The size of the texture in pixels.</param>
            <param name="brush">The brush used as a key for texture cache.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:SciChart.Drawing.TextureCache.GetByteTexture(System.Windows.Size,System.Windows.Media.Brush)">
            <summary>
            Gets the Texture of Size N and keyed by Brush
            </summary>
            <param name="size">The size.</param>
            <param name="brush">The brush.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Drawing.TextureCache.GetWriteableBitmapTexture(System.Windows.FrameworkElement)">
            <summary>
            Gets the WriteableBitmap Texture keyed by FrameworkElement
            </summary>
            <param name="fe">The fe.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Drawing.TextureCache.AddTexture(System.Windows.Size,System.Windows.Media.Brush,System.Int32[])">
            <summary>
            Adds a texture keyed by Size and Brush to the cache
            </summary>
            <param name="size">The size.</param>
            <param name="brush">The brush.</param>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:SciChart.Drawing.TextureCache.GetIntTexture(System.Windows.Size,System.Windows.Media.Brush)">
            <summary>
            Gets the Texture keyed by Size and Brush
            </summary>
            <param name="size">The size.</param>
            <param name="brush">The brush.</param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Drawing.Utility.PointUtil">
            <summary>
            Provides helper methods for manipulations with points
            </summary>
        </member>
        <member name="T:SciChart.Drawing.Utility.PointUtil.Line">
            <summary>
            Represents a straight line between two points
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Utility.PointUtil.Line.X1">
            <summary>
            The X coord of the first point
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Utility.PointUtil.Line.Y1">
            <summary>
            The Y coord of the first point
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Utility.PointUtil.Line.X2">
            <summary>
            The X coord of the second point
            </summary>
        </member>
        <member name="F:SciChart.Drawing.Utility.PointUtil.Line.Y2">
            <summary>
            The Y coord of the second point
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Utility.PointUtil.Line.#ctor(System.Windows.Point,System.Windows.Point)">
            <summary>
            Creates a new instance of the <see cref="T:SciChart.Drawing.Utility.PointUtil.Line" /> type
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Utility.PointUtil.Line.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new instance of the <see cref="T:SciChart.Drawing.Utility.PointUtil.Line" /> type
            </summary>
        </member>
        <member name="M:SciChart.Drawing.Utility.PointUtil.LineSegmentsIntersection2D(SciChart.Drawing.Utility.PointUtil.Line,SciChart.Drawing.Utility.PointUtil.Line,System.Windows.Point@)">
            <summary>
            Looks for the intersection point for the two lines passed in
            </summary>
            <param name="firstLine">The first line</param>
            <param name="secondLine">The second line</param>
            <param name="intersectionPoint">If the lines intersect, holds the intersection point</param>
            <returns>The value indicating whether an intersection occurs</returns>
            <remarks>See http://paulbourke.net/geometry/lineline2d/Helpers.cs </remarks>
        </member>
        <member name="M:SciChart.Drawing.Utility.PointUtil.LineIntersection2D(SciChart.Drawing.Utility.PointUtil.Line,SciChart.Drawing.Utility.PointUtil.Line,System.Windows.Point@)">
            <summary>
            Looks for the intersection point for the two lines passed in
            </summary>
            <param name="l1">The first line</param>
            <param name="l2">The second line</param>
            <param name="intersectionPoint">If the lines intersect, holds the intersection point</param>
            <returns>The value indicating whether an intersection occurs</returns>
            <remarks>See http://paulbourke.net/geometry/lineline2d/Helpers.cs </remarks>
        </member>
        <member name="M:SciChart.Drawing.Utility.PointUtil.IsHitOnPolygon(System.Windows.Point,System.Windows.Point[])">
            <summary>
            Get whether the coordinate mouse point is on the polygon
            </summary>
            <param name="mousePoint">Mouse point</param>
            <param name="polygonPoints">polygon points</param>
        </member>
        <member name="M:SciChart.Drawing.Utility.PointUtil.RectangleIntersectCircle(System.Windows.Point,System.Windows.Point,System.Double,System.Double,System.Double)">
            <summary></summary>
            <param name="startSelectionPoint"></param>
            <param name="endSelectionPoint"></param>
            <param name="centerX"></param>
            <param name="centerY"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Drawing.Utility.PointUtil.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Distance between two Points
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Drawing.Utility.PointUtil.PolarDistance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Distance between two Points in polar coordinates
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Drawing.Utility.PointUtil.DistanceFromLine(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Boolean)">
            <summary>
            Compute the distance from AB to C
            </summary>
            <param name="pt">The pt.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="isSegment">if isSegment is true, AB is a segment, not a line..</param>
            <returns></returns>
        </member>
        <member name="M:SciChart.Drawing.Utility.PointUtil.IsInBounds(System.Windows.Point,System.Windows.Size)">
            <summary>
            Determines whether the point is in bounds for the viewport size.
            </summary>
            <param name="point">The point.</param>
            <param name="viewportSize">Size of the viewport.</param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Drawing.Utility.SutherlandHodgman">
            <summary>
            Sutherland–Hodgman polygon clipping algorithm
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Sutherland%E2%80%93Hodgman_algorithm</remarks>
        </member>
        <member name="M:SciChart.Drawing.Utility.SutherlandHodgman.GetIntersectedPolygon(System.Collections.Generic.IEnumerable{System.Windows.Point},System.Windows.Rect)">
            <summary>
            This clips the subject polygon against the clip polygon (gets the intersection of the two polygons)
            </summary>
            <remarks>
            Based on the psuedocode from:
            http://en.wikipedia.org/wiki/Sutherland%E2%80%93Hodgman
            </remarks>
            <param name="subjectPoly">Can be concave or convex</param>
            <param name="clipPoly">Must be convex</param>
            <returns>The intersection of the two polygons (or null)</returns>
        </member>
        <member name="T:SciChart.Drawing.VisualXcceleratorRasterizer.ColorExtensions">
            <summary>
            Provides methods to convert a <see cref="T:System.Windows.Media.Color" /> to a single 32-bit value and back, a single 32-bit value to a <see cref="T:System.Windows.Media.Color" /></summary>
        </member>
        <member name="M:SciChart.Drawing.VisualXcceleratorRasterizer.ColorExtensions.ToArgb(System.Windows.Media.Color)">
            <summary>
            Converts a <see cref="T:System.Windows.Media.Color" /> to UInt32 returning all four color components A,R,G,B in a single 32-bit value
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:SciChart.Drawing.VisualXcceleratorRasterizer.ColorExtensions.ToAbgr(System.Windows.Media.Color)">
            <summary>
            Converts a <see cref="T:System.Windows.Media.Color" /> to UInt32 returning all four color components A,B,G,R in a single 32-bit value
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:SciChart.Drawing.VisualXcceleratorRasterizer.ColorExtensions.ToColor(System.UInt32)">
            <summary>
            Converts a UInt32 ARGB Color to <see cref="T:System.Windows.Media.Color" /> struct
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="T:SciChart.Drawing.VisualXcceleratorRasterizer.DirectXMode">
            <summary>
            Enumeration constants to define the usage of DirectX in SciChart
            </summary>
        </member>
        <member name="F:SciChart.Drawing.VisualXcceleratorRasterizer.DirectXMode.None">
            <summary></summary>
        </member>
        <member name="F:SciChart.Drawing.VisualXcceleratorRasterizer.DirectXMode.AutoDetect">
            <summary>
            Auto-detects DirectX mode for D3D Chart Rendering
            </summary>
        </member>
        <member name="F:SciChart.Drawing.VisualXcceleratorRasterizer.DirectXMode.DirectX9c">
            <summary>
            Force using DirectX9c for D3D Chart Rendering
            </summary>
        </member>
        <member name="F:SciChart.Drawing.VisualXcceleratorRasterizer.DirectXMode.DirectX11">
            <summary>
            Force using DirectX11 for D3D Chart Rendering
            </summary>
        </member>
        <member name="T:SciChart.Drawing.VisualXcceleratorRasterizer.FullScreenAntiAliasingMode">
            <summary>
            Enumeration constants to define the Full Screen AntiAliasing mode on the SciChartSurface and SciChart3DSurface
            </summary>
        </member>
        <member name="F:SciChart.Drawing.VisualXcceleratorRasterizer.FullScreenAntiAliasingMode.None">
            <summary>
            No Antialiasing
            </summary>
        </member>
        <member name="F:SciChart.Drawing.VisualXcceleratorRasterizer.FullScreenAntiAliasingMode.MSAA2x">
            <summary>
            Enables Multi-Sample AntiAliasing x2
            </summary>
        </member>
        <member name="F:SciChart.Drawing.VisualXcceleratorRasterizer.FullScreenAntiAliasingMode.MSAA4x">
            <summary>
            Enables Multi-Sample AntiAliasing x4
            </summary>
        </member>
        <member name="F:SciChart.Drawing.VisualXcceleratorRasterizer.FullScreenAntiAliasingMode.MSAA8x">
            <summary>
            Enables Multi-Sample AntiAliasing x8
            </summary>
        </member>
        <member name="T:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface">
            <summary>
            Provides a <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> implementation that uses The Visual Xccelerator Engine
            </summary>
        </member>
        <member name="P:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface.Pipeline">
            <summary>
            The render pipeline of the <see cref="T:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface" /></summary>
        </member>
        <member name="M:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface.#ctor(SciChart.Drawing.VisualXcceleratorRasterizer.VxRenderSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface.#ctor(System.Boolean)">
            <summary>
            Internal access for testing.
            </summary>
        </member>
        <member name="P:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface.IsRemoteDesktop">
            <summary>
            Determines if the code is being run under Remote Desktop.
            </summary>
        </member>
        <member name="P:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface.UseAlternativeFillSource">
            <summary>
            When false (default), uses <see cref="T:System.Windows.Interop.D3DImage" /> for hardware accelerated texture sharing. 
            When true, uses software method to FillSource (avoiding use of D3DImage). This can help compatibility on certain systems
            </summary>
            <example>
            To enable compatibility mode for SciChart3DSurface, set this property once, statically, in your application
            <code>        
            void Foo()
            {
               Direct3D11RenderSurface.UseAlternativeFillSource = true;
            }
            </code></example>
        </member>
        <member name="P:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface.ForceStallUntilGPUIsIdle">
            <summary>
            When false (default), there is no waiting for the gpu to finish rendering, and the frame buffer is copied immediately
            when true, we force the application to stall until the gpu is idle, this fixes flicker issues that can happen on older hardware
            </summary>
            <example>
            To enable waiting for gpu to finish
            <code>        
            void Foo()
            {
               Viewport3D.ForceStallUntilGPUIsIdle = true;
            }
            </code></example>
        </member>
        <member name="M:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface.GetRenderContext">
            <summary>
            Returns a RenderContext valid for the current render pass.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface.FillSourceRDP">
            <summary>
            Should be called to fill the WPF Image from the Direct3D Render Target at the end of drawing.
            </summary>
            <remarks>
            Alternative method for filling a WriteableBitmap with DirectX content, avoiding D3DImage
            (does not work over RDP due to bug in .NET4.0 implementation of D3DImage)
            </remarks>
        </member>
        <member name="M:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface.FillSource">
            <summary>
            Should be called to fill the WPF Image from the Direct3D Render Target at the end of drawing.
            </summary>
        </member>
        <member name="M:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface.RecreateSurface">
            <summary>
            Recreates the elements required by the Viewport, called once at startup and when the surface is resized.
            </summary>
        </member>
        <member name="M:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface.DisposeUnmanagedResources">
            <summary>
            Called when the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> is disposed.
            </summary>
        </member>
        <member name="M:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface.RestartEngineWith(SciChart.Drawing.VisualXcceleratorRasterizer.DirectXMode,SciChart.Drawing.VisualXcceleratorRasterizer.FullScreenAntiAliasingMode,System.Boolean)">
            <summary>
            Restarts 3D Engine with configuration flags.
            </summary>
            <param name="directXMode"></param>
            <param name="antiAliasingMode"></param>
            <param name="d3d11UseLowerFeaturesLevel"></param>
        </member>
        <member name="M:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface.AddUnmanagedDisposable(System.IDisposable)">
            <summary>
            Called when the elements required by the Viewport have been recreated.
            </summary>
        </member>
        <member name="M:SciChart.Drawing.VisualXcceleratorRasterizer.VisualXcceleratorRenderSurface.CleanupDisposables">
            <summary>
            Called when the <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> is disposed.
            </summary>
        </member>
        <member name="M:SciChart.Drawing.VisualXcceleratorRasterizer.VxPen.GetSmoothStrokeThickness(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            For smooth appearance of non-digital anti-aliased line, the stroke thickness should be greater than 1 pixel
            </summary>
        </member>
        <member name="T:SciChart.Drawing.XamlRasterizer.XamlRenderSurface">
            <summary>
            Provides a <see cref="T:SciChart.Drawing.Common.RenderSurfaceBase" /> implementation that uses a High-Quality software rasterizer, capable of rendering with sub-pixel accuracy. 
            The downside is, the <see cref="T:SciChart.Drawing.XamlRasterizer.XamlRenderSurface" /> uses a more accurate vector-based rendering engine which is slower than the <see cref="T:SciChart.Drawing.HighSpeedRasterizer.HighSpeedRenderSurface" /> counterpart.
            </summary>
            <seealso cref="T:SciChart.Drawing.HighSpeedRasterizer.HighSpeedRenderSurface" />
            <seealso cref="T:SciChart.Drawing.Common.RenderSurfaceBase" />
            <seealso cref="T:SciChart.Drawing.Common.IRenderContext2D" />
        </member>
        <member name="M:SciChart.Drawing.XamlRasterizer.XamlRenderSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SciChart.Drawing.XamlRasterizer.XamlRenderSurface" /> class.
            </summary>
        </member>
        <member name="M:SciChart.Drawing.XamlRasterizer.XamlRenderSurface.RecreateSurface">
            <summary>
            Recreates the elements required by the Viewport, called once at startup and when the surface is resized
            </summary>
        </member>
        <member name="M:SciChart.Drawing.XamlRasterizer.XamlRenderSurface.GetRenderContext">
            <summary>
            When overridden in a derived class, returns a RenderContext valid for the current render pass
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Windows.Media.Imaging.WriteableBitmapExtensions">
            <summary>
            Collection of draw extension methods for the Silverlight WriteableBitmap class.
            </summary>
            <summary>
            Collection of extension methods for the WriteableBitmap class.
            </summary>
            <summary>
            Collection of blit (copy) extension methods for the WriteableBitmap class.
            </summary>
            <summary>
            Collection of interchange extension methods for the WriteableBitmap class.
            </summary>
            <summary>
            Collection of extension methods for the WriteableBitmap class.
            </summary>
            <summary>
            Collection of filter / convolution extension methods for the WriteableBitmap class.
            </summary>
            <summary>
            Collection of draw extension methods for the WriteableBitmap class.
            </summary>
            <summary>
            Collection of draw spline extension methods for the WriteableBitmap class.
            </summary>
            <summary>
            Collection of transformation extension methods for the WriteableBitmap class.
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillRectangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Int32},System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Draws a filled rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="colorCb">The color.</param>
            <param name="blendMode">The blend mode.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillEllipseCentered(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="context">The BitmapContext.</param>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
            <param name="blendMode">The blend mode. BlendMode.Alpha is the default mode.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillPolygon(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Func{System.Int32,System.Int32,System.Int32},System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Draws a filled polygon. Add the first point also at the end of the array if the line should be closed.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points of the polygon in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
            <param name="colorCb">The color for the fill.</param>
            <param name="blendMode">The blend mode. Default is Alpha</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineBresenham(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a colored line by connecting two points using the Bresenham algorithm.
            </summary>
            <param name="context">The BitmapContext.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawEllipseCentered(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="context">The BitmapContext.</param>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
            /// <param name="thickness">The thickness for the line.</param></member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawPixel(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the color of the pixel. 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="context">The BitmapContext.</param>
            <param name="w">The width of the bitmap.</param>
            <param name="h">The height of the bitmap.</param>
            <param name="x1">The x coordinate (row).</param>
            <param name="y1">The y coordinate (column).</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Clear(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Media.Color)">
            <summary>
            Fills the whole WriteableBitmap with a color.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="color">The color used for filling.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Clear(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Fills the whole WriteableBitmap with an empty color (0).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Clone(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Clones the specified WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <returns>A copy of the WriteableBitmap.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ForEach(System.Windows.Media.Imaging.WriteableBitmap,System.Func{System.Int32,System.Int32,System.Windows.Media.Color})">
            <summary>
            Applies the given function to all the pixels of the bitmap in 
            order to set their color.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="func">The function to apply. With parameters x, y and a color as a result</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ForEach(System.Windows.Media.Imaging.WriteableBitmap,System.Func{System.Int32,System.Int32,System.Windows.Media.Color,System.Windows.Media.Color})">
            <summary>
            Applies the given function to all the pixels of the bitmap in 
            order to set their color.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="func">The function to apply. With parameters x, y, source color and a color as a result</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.GetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the x, y coordinate as integer.  
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The color of the pixel at x, y.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.GetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the x, y coordinate as a Color struct.  
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The color of the pixel at x, y as a Color struct.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.GetBrightness(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            Gets the brightness / luminance of the pixel at the x, y coordinate as byte.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <returns>The brightness of the pixel at x, y.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the pixel using a precalculated index (faster). 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="index">The coordinate index.</param>
            <param name="r">The red value of the color.</param>
            <param name="g">The green value of the color.</param>
            <param name="b">The blue value of the color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the pixel. 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate (row).</param>
            <param name="y">The y coordinate (column).</param>
            <param name="r">The red value of the color.</param>
            <param name="g">The green value of the color.</param>
            <param name="b">The blue value of the color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the pixel including the alpha value and using a precalculated index (faster). 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="index">The coordinate index.</param>
            <param name="a">The alpha value of the color.</param>
            <param name="r">The red value of the color.</param>
            <param name="g">The green value of the color.</param>
            <param name="b">The blue value of the color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the color of the pixel including the alpha value. 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate (row).</param>
            <param name="y">The y coordinate (column).</param>
            <param name="a">The alpha value of the color.</param>
            <param name="r">The red value of the color.</param>
            <param name="g">The green value of the color.</param>
            <param name="b">The blue value of the color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Windows.Media.Color)">
            <summary>
            Sets the color of the pixel using a precalculated index (faster). 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="index">The coordinate index.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Sets the color of the pixel. 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate (row).</param>
            <param name="y">The y coordinate (column).</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Byte,System.Windows.Media.Color)">
            <summary>
            Sets the color of the pixel using an extra alpha value and a precalculated index (faster). 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="index">The coordinate index.</param>
            <param name="a">The alpha value of the color.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Byte,System.Windows.Media.Color)">
            <summary>
            Sets the color of the pixel using an extra alpha value. 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate (row).</param>
            <param name="y">The y coordinate (column).</param>
            <param name="a">The alpha value of the color.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixeli(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            Sets the color of the pixel using a precalculated index (faster).  
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="index">The coordinate index.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.SetPixel(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the color of the pixel. 
            For best performance this method should not be used in iterative real-time scenarios. Implement the code directly inside a loop.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate (row).</param>
            <param name="y">The y coordinate (column).</param>
            <param name="color">The color.</param>
        </member>
        <member name="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode">
            <summary>
            The blending mode.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Alpha">
            <summary>
            Alpha blendiing uses the alpha channel to combine the source and destination. 
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Additive">
            <summary>
            Additive blending adds the colors of the source and the destination.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Subtractive">
            <summary>
            Subtractive blending subtracts the source color from the destination.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Mask">
            <summary>
            Uses the source color as a mask.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Multiply">
            <summary>
            Multiplies the source color with the destination color.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.ColorKeying">
            <summary>
            Ignores the specified Color
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.None">
            <summary>
            No blending just copies the pixels from the source.
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Blit(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect,System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect,System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Copies (blits) the pixels from the WriteableBitmap source to the destination WriteableBitmap (this).
            </summary>
            <param name="bmp">The destination WriteableBitmap.</param>
            <param name="destRect">The rectangle that defines the destination region.</param>
            <param name="source">The source WriteableBitmap.</param>
            <param name="sourceRect">The rectangle that will be copied from the source to the destination.</param>
            <param name="blendMode">The blending mode <see cref="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode" />.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Blit(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect,System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect)">
            <summary>
            Copies (blits) the pixels from the WriteableBitmap source to the destination WriteableBitmap (this).
            </summary>
            <param name="bmp">The destination WriteableBitmap.</param>
            <param name="destRect">The rectangle that defines the destination region.</param>
            <param name="source">The source WriteableBitmap.</param>
            <param name="sourceRect">The rectangle that will be copied from the source to the destination.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Blit(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Point,System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect,System.Windows.Media.Color,System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Copies (blits) the pixels from the WriteableBitmap source to the destination WriteableBitmap (this).
            </summary>
            <param name="bmp">The destination WriteableBitmap.</param>
            <param name="destPosition">The destination position in the destination bitmap.</param>
            <param name="source">The source WriteableBitmap.</param>
            <param name="sourceRect">The rectangle that will be copied from the source to the destination.</param>
            <param name="color">If not Colors.White, will tint the source image. A partially transparent color and the image will be drawn partially transparent.</param>
            <param name="blendMode">The blending mode <see cref="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode" />.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ToByteArray(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            Copies the Pixels from the WriteableBitmap into a ARGB byte array starting at a specific Pixels index.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="offset">The starting Pixels index.</param>
            <param name="count">The number of Pixels to copy, -1 for all</param>
            <returns>The color buffer as byte ARGB values.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ToByteArray(System.Windows.Media.Imaging.WriteableBitmap,System.Int32)">
            <summary>
            Copies the Pixels from the WriteableBitmap into a ARGB byte array.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="count">The number of pixels to copy.</param>
            <returns>The color buffer as byte ARGB values.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.ToByteArray(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Copies all the Pixels from the WriteableBitmap into a ARGB byte array.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <returns>The color buffer as byte ARGB values.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FromByteArray(System.Windows.Media.Imaging.WriteableBitmap,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies color information from an ARGB byte array into this WriteableBitmap starting at a specific buffer index.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="offset">The starting index in the buffer.</param>
            <param name="count">The number of bytes to copy from the buffer.</param>
            <param name="buffer">The color buffer as byte ARGB values.</param>
            <returns>The WriteableBitmap that was passed as parameter.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FromByteArray(System.Windows.Media.Imaging.WriteableBitmap,System.Byte[],System.Int32)">
            <summary>
            Copies color information from an ARGB byte array into this WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="count">The number of bytes to copy from the buffer.</param>
            <param name="buffer">The color buffer as byte ARGB values.</param>
            <returns>The WriteableBitmap that was passed as parameter.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FromByteArray(System.Windows.Media.Imaging.WriteableBitmap,System.Byte[])">
            <summary>
            Copies all the color information from an ARGB byte array into this WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="buffer">The color buffer as byte ARGB values.</param>
            <returns>The WriteableBitmap that was passed as parameter.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.WriteTga(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream)">
            <summary>
            Writes the WriteableBitmap as a TGA image to a stream. 
            Used with permission from Nokola: http://nokola.com/blog/post/2010/01/21/Quick-and-Dirty-Output-of-WriteableBitmap-as-TGA-Image.aspx
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="destination">The destination stream.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FromResource(System.Windows.Media.Imaging.WriteableBitmap,System.String)">
            <summary>
            Loads an image from the applications resource file and returns a new WriteableBitmap. The passed WriteableBitmap is not used.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="relativePath">Only the relative path to the resource file. The assembly name is retrieved automatically.</param>
            <returns>A new WriteableBitmap containing the pixel data.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FromContent(System.Windows.Media.Imaging.WriteableBitmap,System.String)">
            <summary>
            Loads an image from the applications content and returns a new WriteableBitmap. The passed WriteableBitmap is not used.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="relativePath">Only the relative path to the content file.</param>
            <returns>A new WriteableBitmap containing the pixel data.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FromStream(System.Windows.Media.Imaging.WriteableBitmap,System.IO.Stream)">
            <summary>
            Loads the data from an image stream and returns a new WriteableBitmap. The passed WriteableBitmap is not used.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="stream">The stream with the image data.</param>
            <returns>A new WriteableBitmap containing the pixel data.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillRectangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a filled rectangle using <see cref="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Alpha" />.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillRectangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a filled rectangle using <see cref="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode.Alpha" />.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillRectangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Draws a filled rectangle with the specified <see cref="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode" />.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color.</param>
            <param name="blendMode">The blend mode.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillEllipse(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillEllipse(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillEllipseCentered(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillEllipseCentered(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillEllipseCentered(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing filled ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
            <param name="blendMode">The blend mode.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillPolygon(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Windows.Media.Color)">
            <summary>
            Draws a filled polygon. Add the first point also at the end of the array if the line should be closed.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points of the polygon in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillPolygon(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Int32)">
            <summary>
            Draws a filled polygon. Add the first point also at the end of the array if the line should be closed.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points of the polygon in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillPolygon(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Int32,System.Windows.Media.Imaging.WriteableBitmapExtensions.BlendMode)">
            <summary>
            Draws a filled polygon. Add the first point also at the end of the array if the line should be closed.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points of the polygon in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
            <param name="color">The color for the line.</param>
            <param name="blendMode">The blend mode. Default is Alpha</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillQuad(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a filled quad.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="x4">The x-coordinate of the 4th point.</param>
            <param name="y4">The y-coordinate of the 4th point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillQuad(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a filled quad.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="x4">The x-coordinate of the 4th point.</param>
            <param name="y4">The y-coordinate of the 4th point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillTriangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a filled triangle.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillTriangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a filled triangle.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillBeziers(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Windows.Media.Color)">
            <summary>
            Draws a series of filled, cubic Bezier splines each defined by start, end and two control points. 
            The ending point of the previous curve is used as starting point for the next. 
            Therfore the inital curve needs four points and the subsequent 3 (2 control and 1 end point).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, cx1, cy1, cx2, cy2, x2, y2, cx3, cx4 ..., xn, yn).</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillBeziers(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Int32)">
            <summary>
            Draws a series of filled, cubic Bezier splines each defined by start, end and two control points. 
            The ending point of the previous curve is used as starting point for the next. 
            Therfore the inital curve needs four points and the subsequent 3 (2 control and 1 end point).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, cx1, cy1, cx2, cy2, x2, y2, cx3, cx4 ..., xn, yn).</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillCurve(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Windows.Media.Color)">
            <summary>
            Draws a filled Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillCurve(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Int32)">
            <summary>
            Draws a filled Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillCurveClosed(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Windows.Media.Color)">
            <summary>
            Draws a filled, closed Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.FillCurveClosed(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Int32)">
            <summary>
            Draws a filled, closed Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.KernelGaussianBlur5x5">
            <summary>
             Gaussian blur kernel with the size 5x5
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.KernelGaussianBlur3x3">
            <summary>
             Gaussian blur kernel with the size 3x3
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.KernelSharpen3x3">
            <summary>
             Sharpen kernel with the size 3x3
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Convolute(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[0:,0:])">
            <summary>
            Creates a new filtered WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="kernel">The kernel used for convolution.</param>
            <returns>A new WriteableBitmap that is a filtered version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Convolute(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[0:,0:],System.Int32,System.Int32)">
            <summary>
            Creates a new filtered WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="kernel">The kernel used for convolution.</param>
            <param name="kernelFactorSum">The factor used for the kernel summing.</param>
            <param name="kernelOffsetSum">The offset used for the kernel summing.</param>
            <returns>A new WriteableBitmap that is a filtered version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Invert(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Creates a new inverted WriteableBitmap and returns it.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <returns>The new inverted WriteableBitmap.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.AlphaBlend(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Alpha blends 2 premultiplied colors with each other
            </summary>
            <param name="sa">Source alpha color component</param>
            <param name="sr">Premultiplied source red color component</param>
            <param name="sg">Premultiplied source green color component</param>
            <param name="sb">Premultiplied source blue color component</param>
            <param name="destPixel">Premultiplied destination color</param>
            <returns>Premultiplied blended color value</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawWuLine(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an anti-aliased, alpha blended, colored line by connecting two points using Wu's antialiasing algorithm
            Uses the pixels array and the width directly for best performance.
            </summary>
            <param name="context">An array containing the pixels as int RGBA value.</param>
            <param name="pixelWidth">The width of one scanline in the pixels array.</param>
            <param name="pixelHeight">The height of the bitmap.</param>
            <param name="X0">The x0.</param>
            <param name="Y0">The y0.</param>
            <param name="X1">The x1.</param>
            <param name="Y1">The y1.</param>
            <param name="sa">Alpha color component</param>
            <param name="sr">Premultiplied red color component</param>
            <param name="sg">Premultiplied green color component</param>
            <param name="sb">Premultiplied blue color component</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineBresenham(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a colored line by connecting two points using the Bresenham algorithm.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineBresenham(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a colored line by connecting two points using the Bresenham algorithm.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineDDA(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a colored line by connecting two points using a DDA algorithm (Digital Differential Analyzer).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineDDA(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a colored line by connecting two points using a DDA algorithm (Digital Differential Analyzer).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLine(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a colored line by connecting two points using an optimized DDA.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLine(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a colored line by connecting two points using an optimized DDA.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLine(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a colored line by connecting two points using an optimized DDA. 
            Uses the pixels array and the width directly for best performance.
            </summary>
            <param name="context">The context containing the pixels as int RGBA value.</param>
            <param name="pixelWidth">The width of one scanline in the pixels array.</param>
            <param name="pixelHeight">The height of the bitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineAa(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary> 
            Draws an anti-aliased line, using an optimized version of Gupta-Sproull algorithm 
            From http://nokola.com/blog/post/2010/10/14/Anti-aliased-Lines-And-Optimizing-Code-for-Windows-Phone-7e28093First-Look.aspx
            <param name="bmp">The WriteableBitmap.</param><param name="x1">The x-coordinate of the start point.</param><param name="y1">The y-coordinate of the start point.</param><param name="x2">The x-coordinate of the end point.</param><param name="y2">The y-coordinate of the end point.</param><param name="color">The color for the line.</param></summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineAa(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> 
            Draws an anti-aliased line, using an optimized version of Gupta-Sproull algorithm 
            From http://nokola.com/blog/post/2010/10/14/Anti-aliased-Lines-And-Optimizing-Code-for-Windows-Phone-7e28093First-Look.aspx
            <param name="bmp">The WriteableBitmap.</param><param name="x1">The x-coordinate of the start point.</param><param name="y1">The y-coordinate of the start point.</param><param name="x2">The x-coordinate of the end point.</param><param name="y2">The y-coordinate of the end point.</param><param name="color">The color for the line.</param></summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawLineAa(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draws an anti-aliased line, using an optimized version of Gupta-Sproull algorithm
            From http://nokola.com/blog/post/2010/10/14/Anti-aliased-Lines-And-Optimizing-Code-for-Windows-Phone-7e28093First-Look.aspx
            <param name="context">The context containing the pixels as int RGBA value.</param><param name="pixelWidth">The width of one scanline in the pixels array.</param><param name="pixelHeight">The height of the bitmap.</param><param name="x1">The x-coordinate of the start point.</param><param name="y1">The y-coordinate of the start point.</param><param name="x2">The x-coordinate of the end point.</param><param name="y2">The y-coordinate of the end point.</param><param name="color">The color for the line.</param></summary>
            <param name="context">The context.</param>
            <param name="pixelWidth">Width of the pixel.</param>
            <param name="pixelHeight">Height of the pixel.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
            <param name="color">The color.</param>
            <param name="skipFirstPixel">if set to <c>true</c> skip first pixel.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawPolyline(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Windows.Media.Color)">
            <summary>
            Draws a polyline. Add the first point also at the end of the array if the line should be closed.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points of the polyline in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawPolyline(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Int32)">
            <summary>
            Draws a polyline. Add the first point also at the end of the array if the line should be closed.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points of the polyline in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, ..., xn, yn).</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawTriangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawTriangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a triangle.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawQuad(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a quad.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="x4">The x-coordinate of the 4th point.</param>
            <param name="y4">The y-coordinate of the 4th point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawQuad(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a quad.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the 1st point.</param>
            <param name="y1">The y-coordinate of the 1st point.</param>
            <param name="x2">The x-coordinate of the 2nd point.</param>
            <param name="y2">The y-coordinate of the 2nd point.</param>
            <param name="x3">The x-coordinate of the 3rd point.</param>
            <param name="y3">The y-coordinate of the 3rd point.</param>
            <param name="x4">The x-coordinate of the 4th point.</param>
            <param name="y4">The y-coordinate of the 4th point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawRectangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawRectangle(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle.
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawEllipse(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawEllipse(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawEllipseCentered(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawEllipseCentered(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawEllipse(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color,System.Int32)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color for the line.</param>
            <param name="thickness">The thickness for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawEllipse(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            x2 has to be greater than x1 and y2 has to be greater than y1.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the bounding rectangle's left side.</param>
            <param name="y1">The y-coordinate of the bounding rectangle's top side.</param>
            <param name="x2">The x-coordinate of the bounding rectangle's right side.</param>
            <param name="y2">The y-coordinate of the bounding rectangle's bottom side.</param>
            <param name="color">The color for the line.</param>
            <param name="thickness">The thickness for the line.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawEllipseCentered(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A Fast Bresenham Type Algorithm For Drawing Ellipses http://homepage.smc.edu/kennedy_john/belipse.pdf 
            Uses a different parameter representation than DrawEllipse().
            </summary>
            <param name="bmp">The BitmapContext.</param>
            <param name="xc">The x-coordinate of the ellipses center.</param>
            <param name="yc">The y-coordinate of the ellipses center.</param>
            <param name="xr">The radius of the ellipse in x-direction.</param>
            <param name="yr">The radius of the ellipse in y-direction.</param>
            <param name="color">The color for the line.</param>
            /// <param name="thickness">The thickness for the line.</param></member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawBezier(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            Draws a cubic Beziér spline defined by start, end and two control points.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="cx1">The x-coordinate of the 1st control point.</param>
            <param name="cy1">The y-coordinate of the 1st control point.</param>
            <param name="cx2">The x-coordinate of the 2nd control point.</param>
            <param name="cy2">The y-coordinate of the 2nd control point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawBezier(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a cubic Beziér spline defined by start, end and two control points.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x1">The x-coordinate of the start point.</param>
            <param name="y1">The y-coordinate of the start point.</param>
            <param name="cx1">The x-coordinate of the 1st control point.</param>
            <param name="cy1">The y-coordinate of the 1st control point.</param>
            <param name="cx2">The x-coordinate of the 2nd control point.</param>
            <param name="cy2">The y-coordinate of the 2nd control point.</param>
            <param name="x2">The x-coordinate of the end point.</param>
            <param name="y2">The y-coordinate of the end point.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawBeziers(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Windows.Media.Color)">
            <summary>
            Draws a series of cubic Beziér splines each defined by start, end and two control points. 
            The ending point of the previous curve is used as starting point for the next. 
            Therfore the inital curve needs four points and the subsequent 3 (2 control and 1 end point).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, cx1, cy1, cx2, cy2, x2, y2, cx3, cx4 ..., xn, yn).</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawBeziers(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Int32)">
            <summary>
            Draws a series of cubic Beziér splines each defined by start, end and two control points. 
            The ending point of the previous curve is used as starting point for the next. 
            Therfore the inital curve needs four points and the subsequent 3 (2 control and 1 end point).
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, cx1, cy1, cx2, cy2, x2, y2, cx3, cx4 ..., xn, yn).</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawCurve(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Windows.Media.Color)">
            <summary>
            Draws a Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawCurve(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Int32)">
            <summary>
            Draws a Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawCurveClosed(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Windows.Media.Color)">
            <summary>
            Draws a closed Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.DrawCurveClosed(System.Windows.Media.Imaging.WriteableBitmap,System.Int32[],System.Single,System.Int32)">
            <summary>
            Draws a closed Cardinal spline (cubic) defined by a point collection. 
            The cardinal spline passes through each point in the collection.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="points">The points for the curve in x and y pairs, therefore the array is interpreted as (x1, y1, x2, y2, x3, y3, x4, y4, x1, x2 ..., xn, yn).</param>
            <param name="tension">The tension of the curve defines the shape. Usually between 0 and 1. 0 would be a straight line.</param>
            <param name="color">The color for the spline.</param>
        </member>
        <member name="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.Interpolation">
            <summary>
            The interpolation method.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.Interpolation.NearestNeighbor">
            <summary>
            The nearest neighbor algorithm simply selects the color of the nearest pixel.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.Interpolation.Bilinear">
            <summary>
            Linear interpolation in 2D using the average of 3 neighboring pixels.
            </summary>
        </member>
        <member name="T:System.Windows.Media.Imaging.WriteableBitmapExtensions.FlipMode">
            <summary>
            The mode for flipping.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.FlipMode.Vertical">
            <summary>
            Flips the image vertical (around the center of the y-axis).
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.WriteableBitmapExtensions.FlipMode.Horizontal">
            <summary>
            Flips the image horizontal (around the center of the x-axis).
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Crop(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new cropped WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="x">The x coordinate of the rectangle that defines the crop region.</param>
            <param name="y">The y coordinate of the rectangle that defines the crop region.</param>
            <param name="width">The width of the rectangle that defines the crop region.</param>
            <param name="height">The height of the rectangle that defines the crop region.</param>
            <returns>A new WriteableBitmap that is a cropped version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Crop(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Rect)">
            <summary>
            Creates a new cropped WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="region">The rectangle that defines the crop region.</param>
            <returns>A new WriteableBitmap that is a cropped version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Resize(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32,System.Windows.Media.Imaging.WriteableBitmapExtensions.Interpolation)">
            <summary>
            Creates a new resized WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="width">The new desired width.</param>
            <param name="height">The new desired height.</param>
            <param name="interpolation">The interpolation method that should be used.</param>
            <returns>A new WriteableBitmap that is a resized version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Resize(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Imaging.WriteableBitmapExtensions.Interpolation)">
            <summary>
            Creates a new resized bitmap.
            </summary>
            <param name="srcContext">The source context.</param>
            <param name="widthSource">The width of the source pixels.</param>
            <param name="heightSource">The height of the source pixels.</param>
            <param name="width">The new desired width.</param>
            <param name="height">The new desired height.</param>
            <param name="interpolation">The interpolation method that should be used.</param>
            <returns>A new bitmap that is a resized version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Resize(System.Int32*,System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Media.Imaging.WriteableBitmapExtensions.Interpolation)">
            <summary>
            Creates a new resized bitmap.
            </summary>
            <param name="pixels">The source pixels.</param>
            <param name="widthSource">The width of the source pixels.</param>
            <param name="heightSource">The height of the source pixels.</param>
            <param name="width">The new desired width.</param>
            <param name="height">The new desired height.</param>
            <param name="interpolation">The interpolation method that should be used.</param>
            <returns>A new bitmap that is a resized version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Rotate(System.Windows.Media.Imaging.WriteableBitmap,System.Int32)">
            <summary>
            Rotates the bitmap in 90° steps clockwise and returns a new rotated WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="angle">The angle in degress the bitmap should be rotated in 90° steps clockwise.</param>
            <returns>A new WriteableBitmap that is a rotated version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.RotateFree(System.Windows.Media.Imaging.WriteableBitmap,System.Double,System.Boolean)">
            <summary>
            Rotates the bitmap in any degree returns a new rotated WriteableBitmap.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="angle">Arbitrary angle in 360 Degrees (positive = clockwise).</param>
            <param name="crop">if true: keep the size, false: adjust canvas to new size</param>
            <returns>A new WriteableBitmap that is a rotated version of the input.</returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapExtensions.Flip(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Media.Imaging.WriteableBitmapExtensions.FlipMode)">
            <summary>
            Flips (reflects the image) eiter vertical or horizontal.
            </summary>
            <param name="bmp">The WriteableBitmap.</param>
            <param name="flipMode">The flip mode.</param>
            <returns>A new WriteableBitmap that is a flipped version of the input.</returns>
        </member>
        <member name="T:System.Windows.Media.Imaging.ReadWriteMode">
            <summary>
            Read Write Mode for the BitmapContext.
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.ReadWriteMode.ReadOnly">
            <summary>
            On Dispose of a BitmapContext, do not Invalidate
            </summary>
        </member>
        <member name="F:System.Windows.Media.Imaging.ReadWriteMode.ReadWrite">
            <summary>
            On Dispose of a BitmapContext, invalidate the bitmap
            </summary>
        </member>
        <member name="T:System.Windows.Media.Imaging.BitmapContext">
            <summary>
            A disposable cross-platform wrapper around a WriteableBitmap, allowing a common API for Silverlight + WPF with locking + unlocking if necessary
            </summary>
            <remarks>Attempting to put as many preprocessor hacks in this file, to keep the rest of the codebase relatively clean</remarks>
        </member>
        <member name="P:System.Windows.Media.Imaging.BitmapContext.WriteableBitmap">
            <summary>
            The Bitmap
            </summary>
        </member>
        <member name="P:System.Windows.Media.Imaging.BitmapContext.Width">
            <summary>
            Width of the bitmap
            </summary>
        </member>
        <member name="P:System.Windows.Media.Imaging.BitmapContext.Height">
            <summary>
            Height of the bitmap
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.#ctor(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Creates an instance of a BitmapContext, with default mode = ReadWrite
            </summary>
            <param name="writeableBitmap"></param>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.#ctor(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Media.Imaging.ReadWriteMode)">
            <summary>
            Creates an instance of a BitmapContext, with specified ReadWriteMode
            </summary>
            <param name="writeableBitmap"></param>
            <param name="mode"></param>
        </member>
        <member name="P:System.Windows.Media.Imaging.BitmapContext.Pixels">
            <summary>
            The pixels as ARGB integer values, where each channel is 8 bit.
            </summary>
        </member>
        <member name="P:System.Windows.Media.Imaging.BitmapContext.Length">
            <summary>
            The number of pixels.
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.BlockCopy(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32)">
            <summary>
            Performs a Copy operation from source Bto destination BitmapContext
            </summary>
            <remarks>Equivalent to calling Buffer.BlockCopy in Silverlight, or native memcpy in WPF</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.BlockCopy(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Performs a Copy operation from source BitmapContext to destination Array
            </summary>
            <remarks>Equivalent to calling Buffer.BlockCopy in Silverlight, or native memcpy in WPF</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.BlockCopy(System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Performs a Copy operation from source BitmapContext to destination Array
            </summary>
            <remarks>Equivalent to calling Buffer.BlockCopy in Silverlight, or native memcpy in WPF</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.BlockCopy(System.Int32[],System.Int32,System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32)">
            <summary>
            Performs a Copy operation from source Array to destination BitmapContext
            </summary>
            <remarks>Equivalent to calling Buffer.BlockCopy in Silverlight, or native memcpy in WPF</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.BlockCopy(System.Byte[],System.Int32,System.Windows.Media.Imaging.BitmapContext,System.Int32,System.Int32)">
            <summary>
            Performs a Copy operation from source Array to destination BitmapContext
            </summary>
            <remarks>Equivalent to calling Buffer.BlockCopy in Silverlight, or native memcpy in WPF</remarks>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.Clear">
            <summary>
            Clears the BitmapContext, filling the underlying bitmap with zeros
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapContext.Dispose">
            <summary>
            Disposes the BitmapContext, unlocking it and invalidating if WPF
            </summary>
        </member>
        <member name="T:System.Windows.Media.Imaging.BitmapFactory">
            <summary>
            Cross-platform factory for WriteableBitmaps
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapFactory.New(System.Int32,System.Int32)">
            <summary>
            Creates a new WriteableBitmap of the specified width and height
            </summary>
            <remarks>For WPF the default DPI is 96x96 and PixelFormat is Pbgra32</remarks>
            <param name="pixelWidth"></param>
            <param name="pixelHeight"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.BitmapFactory.ConvertToPbgra32Format(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Converts the input BitmapSource to the Pbgra32 format WriteableBitmap which is internally used by the WriteableBitmapEx.
            </summary>
            <param name="source">The source bitmap.</param>
            <returns></returns>
        </member>
        <member name="T:System.Windows.Media.Imaging.WriteableBitmapContextExtensions">
            <summary>
            Provides the WriteableBitmap context pixel data
            </summary>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapContextExtensions.GetBitmapContext(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Gets a BitmapContext within which to perform nested IO operations on the bitmap
            </summary>
            <remarks>For WPF the BitmapContext will lock the bitmap. Call Dispose on the context to unlock</remarks>
            <param name="bmp"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Media.Imaging.WriteableBitmapContextExtensions.GetBitmapContext(System.Windows.Media.Imaging.WriteableBitmap,System.Windows.Media.Imaging.ReadWriteMode)">
            <summary>
            Gets a BitmapContext within which to perform nested IO operations on the bitmap
            </summary>
            <remarks>For WPF the BitmapContext will lock the bitmap. Call Dispose on the context to unlock</remarks>
            <param name="bmp">The bitmap.</param>
            <param name="mode">The ReadWriteMode. If set to ReadOnly, the bitmap will not be invalidated on dispose of the context, else it will</param>
            <returns></returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.op_Explicit(MatterHackers.VectorMath.Vector4)~System.Double*">
            <summary>
            Returns a pointer to the first element of the specified instance.
            </summary>
            <param name="v">The instance.</param>
            <returns>A pointer to the first element of v.</returns>
        </member>
        <member name="M:MatterHackers.VectorMath.Vector4.op_Explicit(MatterHackers.VectorMath.Vector4)~System.IntPtr">
            <summary>
            Returns a pointer to the first element of the specified instance.
            </summary>
            <param name="v">The instance.</param>
            <returns>A pointer to the first element of v.</returns>
        </member>
    </members>
</doc>